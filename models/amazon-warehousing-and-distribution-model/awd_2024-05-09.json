{
  "swagger": "2.0",
  "info": {
    "title": "The Selling Partner API for Amazon Warehousing and Distribution",
    "version": "2024-05-09",
    "description": "The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.",
    "contact": {
      "name": "Selling Partner API Developer Support",
      "url": "https://sellercentral.amazon.com/gp/mws/contactus.html"
    },
    "license": {
      "name": "Apache License 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "sellingpartnerapi-na.amazon.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/awd/2024-05-09/inboundOrders": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payload for creating an inbound order.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InboundOrderCreationData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`createInbound` 201 response.",
            "headers": {
              "Location": {
                "description": "Location header with the order ID for the newly created inbound order.",
                "type": "string"
              },
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InboundOrderReference"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "body": {
                        "value": {
                          "externalReferenceId": "string",
                          "originAddress": {
                            "addressLine1": "address_1",
                            "addressLine2": "address_2",
                            "addressLine3": "address_3",
                            "city": "City1",
                            "countryCode": "CC",
                            "district": "District1",
                            "name": "address_name",
                            "postalCode": "123456",
                            "stateOrRegion": "State1"
                          },
                          "packagesToInbound": [
                            {
                              "count": 1,
                              "distributionPackage": {
                                "contents": {
                                  "products": [
                                    {
                                      "quantity": 1,
                                      "sku": "testPen",
                                      "expiration": "2025-06-07T12:12:09.061Z",
                                      "prepDetails": {
                                        "prepCategory": "PERFORATED",
                                        "prepOwner": "AMAZON",
                                        "labelOwner": "SELF"
                                      }
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "INCHES",
                                    "width": 1
                                  },
                                  "volume": {
                                    "unitOfMeasurement": "CUIN",
                                    "volume": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "POUNDS",
                                    "weight": 1
                                  }
                                },
                                "type": "CASE"
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "response": {
                    "orderId": "TestOrderId"
                  },
                  "responseHeaders": {
                    "Location": {
                      "value": "TestOrderId"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "body": {
                        "value": {
                          "externalReferenceId": "string",
                          "originAddress": {
                            "addressLine1": "address_1",
                            "addressLine2": "address_2",
                            "addressLine3": "address_3",
                            "city": "City1",
                            "countryCode": "CC",
                            "district": "District1",
                            "name": "address_name",
                            "postalCode": "123456",
                            "stateOrRegion": "State1"
                          },
                          "packagesToInbound": [
                            {
                              "count": 1,
                              "distributionPackage": {
                                "contents": {
                                  "products": [
                                    {
                                      "quantity": 1,
                                      "sku": "testPen",
                                      "expiration": "2025-06-07T12:12:09.061Z",
                                      "prepDetails": {
                                        "prepCategory": "PERFORATED",
                                        "prepOwner": "AMAZON",
                                        "labelOwner": "SELF"
                                      }
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "INCHES",
                                    "width": 1
                                  },
                                  "volume": {
                                    "unitOfMeasurement": "CUIN",
                                    "volume": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "POUNDS",
                                    "weight": 1
                                  }
                                },
                                "type": "TEST"
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "message": "Invalid value (`TEST`) passed for `DistributionPackageType`. Valid values are: `CASE`, `PALLET`",
                        "details": "This exception is thrown when client inputs are invalid."
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one shipment per order. \n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "createInbound"
      }
    },
    "/awd/2024-05-09/inboundOrders/{orderId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the inbound order that you want to retrieve.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The 200 response for `getInbound`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InboundOrder"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": "TestOrderId"
                      }
                    }
                  },
                  "response": {
                    "destinationDetails": {
                      "destinationAddress": {
                        "addressLine1": "address_1",
                        "addressLine2": "address_2",
                        "addressLine3": "address_3",
                        "city": "Seattle",
                        "countryCode": "US",
                        "county": "Washington",
                        "district": "District1",
                        "name": "address_name",
                        "phoneNumber": "+14155552671",
                        "postalCode": "123456",
                        "stateOrRegion": "Washington"
                      },
                      "destinationRegion": "us-east"
                    },
                    "createdAt": "2023-06-07T12:12:09.061Z",
                    "externalReferenceId": "TestReferenceId",
                    "orderId": "TestOrderId",
                    "orderStatus": "DRAFT",
                    "originAddress": {
                      "addressLine1": "address_1",
                      "addressLine2": "address_2",
                      "addressLine3": "address_3",
                      "city": "Seattle",
                      "countryCode": "US",
                      "county": "Washington",
                      "district": "District1",
                      "name": "address_name",
                      "phoneNumber": "+14155552671",
                      "postalCode": "123456",
                      "stateOrRegion": "Washington"
                    },
                    "packagesToInbound": [
                      {
                        "count": 1,
                        "distributionPackage": {
                          "contents": {
                            "packages": [],
                            "products": [
                              {
                                "quantity": 1,
                                "sku": "testPen",
                                "expiration": "2025-06-07T12:12:09.061Z",
                                "prepDetails": {
                                  "prepCategory": "PERFORATED",
                                  "prepOwner": "AMAZON",
                                  "labelOwner": "SELF",
                                  "prepInstructions": [{
                                    "prepType": "ITEM_POLYBAGGING",
                                    "prepOwner": "AMAZON"
                                  }]
                                }
                              }
                            ]
                          },
                          "measurements": {
                            "dimensions": {
                              "height": 2.54,
                              "length": 2.54,
                              "unitOfMeasurement": "CENTIMETERS",
                              "width": 2.54
                            },
                            "weight": {
                              "unitOfMeasurement": "KILOGRAMS",
                              "weight": 0.453592
                            }
                          },
                          "type": "CASE"
                        }
                      }
                    ],
                    "updatedAt": "2023-06-07T12:12:09.061Z"
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": " "
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "OrderId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Retrieves an AWD inbound order.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 2 | 2 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "getInbound"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the inbound order that you want to update.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Represents an AWD inbound order.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InboundOrder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The 204 response for `updateInbound`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": "TestOrderId1"
                      },
                      "body": {
                        "value": {
                          "createdAt": "2023-06-07T12:12:09.061Z",
                          "destinationDetails": {
                            "destinationAddress": {
                              "addressLine1": "address_1",
                              "addressLine2": "address_2",
                              "addressLine3": "address_3",
                              "city": "Seattle",
                              "countryCode": "US",
                              "county": "Washington",
                              "district": "District1",
                              "name": "address_name",
                              "phoneNumber": "+14155552671",
                              "postalCode": "123456",
                              "stateOrRegion": "Washington"
                            },
                            "destinationRegion": "us-east"
                          },
                          "orderId": "TestOrderId1",
                          "orderStatus": "DRAFT",
                          "originAddress": {
                            "addressLine1": "address_1",
                            "addressLine2": "address_2",
                            "addressLine3": "address_3",
                            "city": "City1",
                            "countryCode": "CC",
                            "district": "District1",
                            "name": "DestinationName",
                            "postalCode": "123456",
                            "stateOrRegion": "State1"
                          },
                          "packagesToInbound": [
                            {
                              "count": 2,
                              "distributionPackage": {
                                "contents": {
                                  "packages": [],
                                  "products": [
                                    {
                                      "quantity": 10,
                                      "sku": "testPen",
                                      "expiration": "2025-06-07T12:12:09.061Z",
                                      "prepDetails": {
                                        "prepCategory": "PERFORATED",
                                        "prepOwner": "AMAZON",
                                        "labelOwner": "SELF",
                                        "prepInstructions": [{
                                          "prepType": "ITEM_POLYBAGGING",
                                          "prepOwner": "AMAZON"
                                        }]
                                      }
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "CENTIMETERS",
                                    "width": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "KILOGRAMS",
                                    "weight": 1
                                  }
                                },
                                "type": "CASE"
                              }
                            }
                          ],
                          "updatedAt": "2023-06-07T12:12:09.061Z"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": "TestOrderId1"
                      },
                      "body": {
                        "value": {
                          "destinationDetails": {
                            "destinationAddress": {
                              "addressLine1": "address_1",
                              "addressLine2": "address_2",
                              "addressLine3": "address_3",
                              "city": "Seattle",
                              "countryCode": "US",
                              "county": "Washington",
                              "district": "District1",
                              "name": "address_name",
                              "phoneNumber": "+14155552671",
                              "postalCode": "123456",
                              "stateOrRegion": "Washington"
                            },
                            "destinationRegion": "us-east"
                          },
                          "createdAt": "2023-06-07T12:12:09.061Z",
                          "orderId": "TestOrderId1",
                          "orderStatus": "DRAFT",
                          "originAddress": {
                            "addressLine1": "address_1",
                            "addressLine2": "address_2",
                            "addressLine3": "address_3",
                            "city": "City1",
                            "countryCode": "CC",
                            "district": "District1",
                            "name": "DestinationName",
                            "postalCode": "123456",
                            "stateOrRegion": "State1"
                          },
                          "packagesToInbound": [
                            {
                              "count": 2,
                              "distributionPackage": {
                                "contents": {
                                  "packages": [],
                                  "products": [
                                    {
                                      "quantity": 10,
                                      "sku": "testPen",
                                      "expiration": "2025-06-07T12:12:09.061Z",
                                      "prepDetails": {
                                        "prepCategory": "PERFORATED",
                                        "prepOwner": "AMAZON",
                                        "labelOwner": "SELF",
                                        "prepInstructions": [{
                                          "prepType": "ITEM_POLYBAGGING",
                                          "prepOwner": "AMAZON"
                                        }]
                                      }
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "CENTIMETERS",
                                    "width": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "KILOGRAMS",
                                    "weight": 1
                                  }
                                },
                                "type": "TEST"
                              }
                            }
                          ],
                          "updatedAt": "2023-06-07T12:12:09.061Z"
                        }
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "message": "Invalid value (`TEST`) passed for `DistributionPackageType`. Valid values are: `CASE`, `PALLET`",
                        "details": "This exception is thrown when client inputs are invalid."
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "409": {
            "description": "`ConflictException` 409 response.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Updates an AWD inbound order that is in `DRAFT` status and not yet confirmed. Use this operation to update the `packagesToInbound`, `originAddress` and `preferences` attributes.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "updateInbound"
      }
    },
    "/awd/2024-05-09/inboundOrders/{orderId}/cancellation": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the inbound order you want to cancel.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The 204 response for `cancelInbound`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": "TestOrderId1"
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": [{}]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": " "
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "OrderId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "409": {
            "description": "`ConflictException` 409 response.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Cancels an AWD Inbound order and its associated shipment.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "cancelInbound"
      }
    },
    "/awd/2024-05-09/inboundOrders/{orderId}/confirmation": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the inbound order that you want to confirm.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The 204 response for `confirmInbound`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": "TestOrderId1"
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": [{}]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "orderId": {
                        "value": " "
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "OrderId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "409": {
            "description": "`ConflictException` 409 response.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Confirms an AWD inbound order in `DRAFT` status.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "confirmInbound"
      }
    },
    "/awd/2024-05-09/inboundShipments/{shipmentId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ID for the shipment. A shipment contains the cases being inbounded.",
            "in": "path",
            "minLength": 1,
            "name": "shipmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "If equal to `SHOW`, the response includes the shipment SKU quantity details.\n\nDefaults to `HIDE`, in which case the response does not contain SKU quantities",
            "enum": [
              "SHOW",
              "HIDE"
            ],
            "in": "query",
            "name": "skuQuantities",
            "type": "string",
            "x-example": "SHOW",
            "x-docgen-enum-table-extension": [
              {
                "description": "Show the additional SKU quantity details.",
                "value": "SHOW"
              },
              {
                "description": "Hide the additional SKU quantity details.",
                "value": "HIDE"
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The 200 response for `getInboundShipment`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InboundShipment"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "shipmentId": {
                        "value": "TestShipmentId"
                      }
                    }
                  },
                  "response": {
                    "createdAt": "2023-06-07T12:12:09.061Z",
                    "destinationAddress": {
                      "addressLine1": "address_line_1",
                      "addressLine2": "address_line_2",
                      "addressLine3": "address_line_3",
                      "city": "City1",
                      "countryCode": "CC",
                      "district": "District1",
                      "name": "DestinationName",
                      "postalCode": "123456",
                      "stateOrRegion": "State1"
                    },
                    "orderId": "TestOrderId",
                    "originAddress": {
                      "addressLine1": "address_1",
                      "addressLine2": "address_2",
                      "addressLine3": "address_3",
                      "city": "City1",
                      "countryCode": "CC",
                      "district": "District1",
                      "name": "address_name",
                      "postalCode": "123456",
                      "stateOrRegion": "State1"
                    },
                    "receivedQuantity": [
                      {
                        "quantity": 0,
                        "unitOfMeasurement": "CASES"
                      }
                    ],
                    "shipmentContainerQuantities": [
                      {
                        "count": 2,
                        "distributionPackage": {
                          "contents": {
                            "packages": [],
                            "products": [
                              {
                                "quantity": 20,
                                "sku": "testPen"
                              }
                            ]
                          },
                          "measurements": {
                            "dimensions": {
                              "height": 33.02,
                              "length": 45.72,
                              "unitOfMeasurement": "CENTIMETERS",
                              "width": 15.24
                            },
                            "weight": {
                              "unitOfMeasurement": "KILOGRAMS",
                              "weight": 5.443104
                            }
                          },
                          "type": "CASE"
                        }
                      }
                    ],
                    "shipmentId": "TestShipmentId",
                    "shipmentStatus": "CREATED",
                    "shipmentSkuQuantities": [
                      {
                        "sku": "testPen",
                        "expectedQuantity": {
                          "quantity": 2,
                          "unitOfMeasurement": "CASE"
                        },
                        "receivedQuantity": {
                          "quantity": 0,
                          "unitOfMeasurement": "CASE"
                        }
                      }
                    ],
                    "updatedAt": "2023-06-07T12:12:09.061Z"
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "shipmentId": {
                        "value": " "
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "ShipmentId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Retrieves an AWD inbound shipment.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 2 | 2 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)",
        "operationId": "getInboundShipment"
      }
    },
    "/awd/2024-05-09/inboundShipments/{shipmentId}/labels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ID for the shipment.",
            "in": "path",
            "minLength": 1,
            "name": "shipmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Page type for the generated labels. The default is `PLAIN_PAPER`.",
            "enum": [
              "THERMAL_NONPCP",
              "PLAIN_PAPER",
              "LETTER_6"
            ],
            "in": "query",
            "name": "pageType",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "Use `THERMAL_NONPC` for a thermal printer. Supports non-Amazon-partnered shipments.",
                "value": "THERMAL_NONPCP"
              },
              {
                "description": "One label per sheet of US Letter paper. Only for non-Amazon-partnered shipments.",
                "value": "PLAIN_PAPER"
              },
              {
                "description": "Six labels per US Letter label sheet.",
                "value": "LETTER_6"
              }
            ],
            "x-example": "PLAIN_PAPER"
          },
          {
            "description": "The format type of the output file that contains your labels. The default format type is `PDF`.",
            "enum": [
              "PDF"
            ],
            "in": "query",
            "name": "formatType",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "PDF format.",
                "value": "PDF"
              }
            ],
            "x-example": "PDF"
          }
        ],
        "responses": {
          "200": {
            "description": "The 200 response for `getInboundShipmentLabels`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShipmentLabels"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "shipmentId": {
                        "value": "TestShipmentId"
                      }
                    }
                  },
                  "response": {
                    "labelDownloadURL": "TEST_URL",
                    "labelStatus": "GENERATED"
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "shipmentId": {
                        "value": " "
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "ShipmentId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label status is `GENERATED`, then the label URL is available.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 2 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "getInboundShipmentLabels"
      }
    },
    "/awd/2024-05-09/inboundShipments/{shipmentId}/transport": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The shipment ID.",
            "in": "path",
            "minLength": 1,
            "name": "shipmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Transportation details for the shipment.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransportationDetails"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The 204 response for `updateInboundShipmentTransportDetails`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "shipmentId": {
                        "value": "TestShipmentId"
                      },
                      "body": {
                        "value": {
                          "trackingDetails": [
                            {
                              "carrierCode": {
                                "carrierCodeType": "SCAC"
                              },
                              "bookingId": "TRACKING_ID"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "shipmentId": {
                        "value": " "
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "ShipmentId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Updates transport details for an AWD shipment.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "updateInboundShipmentTransportDetails"
      }
    },
    "/awd/2024-05-09/inboundEligibility": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Represents the packages you want to inbound.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InboundPackages"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The 200 response for `checkInboundEligibility`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InboundEligibility"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "body": {
                        "value": {
                          "packagesToInbound": [
                            {
                              "count": 1,
                              "distributionPackage": {
                                "contents": {
                                  "products": [
                                    {
                                      "quantity": 1,
                                      "sku": "TestDVDSku"
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "INCHES",
                                    "width": 1
                                  },
                                  "volume": {
                                    "unitOfMeasurement": "CUIN",
                                    "volume": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "POUNDS",
                                    "weight": 1
                                  }
                                },
                                "type": "CASE"
                              }
                            },
                            {
                              "count": 1,
                              "distributionPackage": {
                                "contents": {
                                  "products": [
                                    {
                                      "quantity": 1,
                                      "sku": "testPen"
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "INCHES",
                                    "width": 1
                                  },
                                  "volume": {
                                    "unitOfMeasurement": "CUIN",
                                    "volume": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "POUNDS",
                                    "weight": 1
                                  }
                                },
                                "type": "CASE"
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "response": {
                    "ineligibilityReasons": [],
                    "status": "INELIGIBLE",
                    "packagesToInbound": [
                      {
                        "ineligibilityReasons": [
                          {
                            "description": "You can't use the gating service to buy this item.",
                            "code": "GATING_BLOCK_ON_GL"
                          }
                        ],
                        "status": "INELIGIBLE",
                        "packageQuantity": {
                          "count": 1,
                          "distributionPackage": {
                            "contents": {
                              "packages": [],
                              "products": [
                                {
                                  "quantity": 1,
                                  "sku": "TestDVDSku"
                                }
                              ]
                            },
                            "measurements": {
                              "dimensions": {
                                "height": 1.0,
                                "length": 1.0,
                                "unitOfMeasurement": "INCHES",
                                "width": 1.0
                              },
                              "volume": {
                                "unitOfMeasurement": "CUIN",
                                "volume": 1.0
                              },
                              "weight": {
                                "unitOfMeasurement": "POUNDS",
                                "weight": 1.0
                              }
                            },
                            "type": "CASE"
                          }
                        }
                      },
                      {
                        "ineligibilityReasons": [],
                        "status": "ELIGIBLE",
                        "packageQuantity": {
                          "count": 1,
                          "distributionPackage": {
                            "contents": {
                              "packages": [],
                              "products": [
                                {
                                  "quantity": 1,
                                  "sku": "testPen"
                                }
                              ]
                            },
                            "measurements": {
                              "dimensions": {
                                "height": 1.0,
                                "length": 1.0,
                                "unitOfMeasurement": "INCHES",
                                "width": 1.0
                              },
                              "volume": {
                                "unitOfMeasurement": "CUIN",
                                "volume": 1.0
                              },
                              "weight": {
                                "unitOfMeasurement": "POUNDS",
                                "weight": 1.0
                              }
                            },
                            "type": "CASE"
                          }
                        }
                      }
                    ],
                    "previewedAt": "1688454771870"
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "body": {
                        "value": {
                          "packagesToInbound": [
                            {
                              "count": 1,
                              "distributionPackage": {
                                "contents": {
                                  "products": [
                                    {
                                      "quantity": 1,
                                      "sku": "TestDVDSku"
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "INCHES",
                                    "width": 1
                                  },
                                  "volume": {
                                    "unitOfMeasurement": "CUIN",
                                    "volume": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "POUNDS",
                                    "weight": 1
                                  }
                                },
                                "type": "CASE"
                              }
                            },
                            {
                              "count": 1,
                              "distributionPackage": {
                                "contents": {
                                  "products": [
                                    {
                                      "quantity": 1,
                                      "sku": "testPen"
                                    }
                                  ]
                                },
                                "measurements": {
                                  "dimensions": {
                                    "height": 1,
                                    "length": 1,
                                    "unitOfMeasurement": "INCHES",
                                    "width": 1
                                  },
                                  "volume": {
                                    "unitOfMeasurement": "CUIN",
                                    "volume": 1
                                  },
                                  "weight": {
                                    "unitOfMeasurement": "POUNDS",
                                    "weight": 1
                                  }
                                },
                                "type": "TEST"
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "OrderId should be present for this request"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Determines if the packages you specify are eligible for an AWD inbound order and contains error details for ineligible packages.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "checkInboundEligibility"
      }
    },
    "/awd/2024-05-09/inboundShipments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Field to sort results by. By default, the response will be sorted by UPDATED_AT.",
            "enum": [
              "UPDATED_AT",
              "CREATED_AT"
            ],
            "in": "query",
            "name": "sortBy",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "Sort by the time of update.",
                "value": "UPDATED_AT"
              },
              {
                "description": "Sort by the time of creation.",
                "value": "CREATED_AT"
              }
            ]
          },
          {
            "description": "Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order.",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "Sorts the collection in ascending order.",
                "value": "ASCENDING"
              },
              {
                "description": "Sorts the collection in descending order.",
                "value": "DESCENDING"
              }
            ],
            "x-example": "ASCENDING"
          },
          {
            "description": "Filter by inbound shipment status.",
            "enum": [
              "CREATED",
              "SHIPPED",
              "IN_TRANSIT",
              "RECEIVING",
              "DELIVERED",
              "CLOSED",
              "CANCELLED"
            ],
            "in": "query",
            "name": "shipmentStatus",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "Shipment is created, but hasn't shipped.",
                "value": "CREATED"
              },
              {
                "description": "Shipment was picked up by the carrier or was dropped off with the carrier.",
                "value": "SHIPPED"
              },
              {
                "description": "The carrier has notified AWD that the shipment is in transit between the origin and destination nodes.",
                "value": "IN_TRANSIT"
              },
              {
                "description": "The shipment has been partially received.",
                "value": "RECEIVING"
              },
              {
                "description": "The shipment has reached the destination node and has been delivered to the facility yard. The shipment `receive` process at the warehouse will start soon.",
                "value": "DELIVERED"
              },
              {
                "description": "No more actions are required for the shipment. This is a final state.",
                "value": "CLOSED"
              },
              {
                "description": "The shipment is cancelled. This is a final state.",
                "value": "CANCELLED"
              }
            ],
            "x-example": "CREATED"
          },
          {
            "description": "List the inbound shipments that were updated after a certain time (inclusive). The date must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.",
            "format": "date-time",
            "in": "query",
            "name": "updatedAfter",
            "type": "string",
            "x-example": "2023-01-12T10:00:00.000Z"
          },
          {
            "description": "List the inbound shipments that were updated before a certain time (inclusive). The date must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.",
            "format": "date-time",
            "in": "query",
            "name": "updatedBefore",
            "type": "string",
            "x-example": "2023-01-12T10:00:00.000Z"
          },
          {
            "default": 25,
            "description": "Maximum number of results to return.",
            "format": "int32",
            "in": "query",
            "maximum": 200,
            "minimum": 1,
            "name": "maxResults",
            "type": "integer",
            "x-example": "10"
          },
          {
            "description": "A token that is used to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `maxResults` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.",
            "in": "query",
            "name": "nextToken",
            "type": "string",
            "x-example": "SampleToken"
          }
        ],
        "responses": {
          "200": {
            "description": "The 200 response for `listInboundShipments`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShipmentListing"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {}
                  },
                  "response": {
                    "shipments": [{
                      "createdAt": "2023-06-07T12:12:09.061Z",
                      "orderId": "TestOrderId",
                      "shipmentId": "TestShipmentId",
                      "shipmentStatus": "CREATED",
                      "updatedAt": "2023-06-07T12:12:09.061Z"
                    }]
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "sortBy": {
                        "value": "TEST"
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "Invalid shipment sortable field received: TEST"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 1 | 1 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "listInboundShipments"
      }
    },
    "/awd/2024-05-09/inventory": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter by seller or merchant SKU for the item.",
            "in": "query",
            "name": "sku",
            "type": "string",
            "x-example": "TestSKU"
          },
          {
            "description": "Sort the response in `ASCENDING` or `DESCENDING` order.",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "Sorts the collection in ascending order.",
                "value": "ASCENDING"
              },
              {
                "description": "Sorts the collection in descending order.",
                "value": "DESCENDING"
              }
            ]
          },
          {
            "description": "Set to `SHOW` to return summaries with additional inventory details. Defaults to `HIDE,` which returns only inventory summary totals.",
            "enum": [
              "SHOW",
              "HIDE"
            ],
            "in": "query",
            "name": "details",
            "type": "string",
            "x-docgen-enum-table-extension": [
              {
                "description": "Show the additional summarized inventory details.",
                "value": "SHOW"
              },
              {
                "description": "Hide the additional summarized inventory details.",
                "value": "HIDE"
              }
            ],
            "x-example": "SHOW"
          },
          {
            "description": "A token that is used to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `maxResults` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.",
            "in": "query",
            "name": "nextToken",
            "type": "string",
            "x-example": "SampleToken"
          },
          {
            "default": 25,
            "description": "Maximum number of results to return.",
            "format": "int32",
            "in": "query",
            "maximum": 200,
            "minimum": 1,
            "name": "maxResults",
            "type": "integer",
            "x-example": "10"
          }
        ],
        "responses": {
          "200": {
            "description": "The 200 response for `listInventory`.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InventoryListing"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {},
                  "response": {
                    "inventory": [
                      {
                        "totalOnhandQuantity": 20,
                        "totalInboundQuantity": 10,
                        "sku": "100TestSKU1Pen",
                        "inventoryDetails": {
                          "availableDistributableQuantity": 10,
                          "reservedDistributableQuantity": 10,
                          "replenishmentQuantity": 10
                        },
                        "expirationDetails": [{
                          "onhandQuantity": 10,
                          "expiration": "2027-01-12T10:00:00.000Z"
                        },
                        {
                          "onhandQuantity": 10,
                          "expiration": "2028-01-12T10:00:00.000Z"
                        }]
                      },
                      {
                        "totalOnhandQuantity": 20,
                        "totalInboundQuantity": 5,
                        "sku": "2U-BKEX-VW4D",
                        "inventoryDetails": {
                          "availableDistributableQuantity": 10,
                          "reservedDistributableQuantity": 10,
                          "replenishmentQuantity": 10
                        },
                        "expirationDetails": [{
                          "onhandQuantity": 20,
                          "expiration": "2027-01-12T10:00:00.000Z"
                        }]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Request has missing or invalid parameters and cannot be parsed.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            },
            "x-amzn-api-sandbox": {
              "static": [
                {
                  "request": {
                    "parameters": {
                      "sortOrder": {
                        "value": "UNKNOWN"
                      }
                    }
                  },
                  "response": {
                    "errors": [
                      {
                        "code": "BAD_REQUEST",
                        "details": "This exception is thrown when client inputs are invalid",
                        "message": "Invalid value: UNKNOWN passed for sort order. Possible values are: [ASCENDING, DESCENDING]"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "headers": {
              "x-amzn-RateLimit-Limit": {
                "description": "Your rate limit (requests per second) for this operation.",
                "type": "string"
              },
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "415": {
            "description": "The request payload is in an unsupported format.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "500": {
            "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "headers": {
              "x-amzn-RequestId": {
                "description": "Unique request reference identifier.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorList"
            }
          }
        },
        "tags": [
          "awd"
        ],
        "description": "Lists AWD inventory associated with a merchant with the ability to apply optional filters.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 2 | 2 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
        "operationId": "listInventory"
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Shipping address that represents the origin or destination location.",
      "properties": {
        "addressLine1": {
          "description": "First line of the address text.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Optional second line of the address text.",
          "type": "string"
        },
        "addressLine3": {
          "description": "Optional third line of the address text.",
          "type": "string"
        },
        "city": {
          "description": "Optional city where this address is located.",
          "type": "string"
        },
        "countryCode": {
          "description": "Two-digit, ISO 3166-1 alpha-2 formatted country code where this address is located.",
          "type": "string"
        },
        "county": {
          "description": "Optional county where this address is located.",
          "type": "string",
          "example": "Washington"
        },
        "district": {
          "description": "Optional district where this address is located.",
          "type": "string"
        },
        "name": {
          "description": "Name of the person, business, or institution at this address.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Optional E.164-formatted phone number for an available contact at this address.",
          "type": "string",
          "example": "+14155552671"
        },
        "postalCode": {
          "description": "Optional postal code where this address is located.",
          "type": "string"
        },
        "stateOrRegion": {
          "description": "State or region where this address is located. Note that this is contextual to the specified country code.",
          "type": "string"
        }
      },
      "required": [
        "addressLine1",
        "countryCode",
        "name",
        "stateOrRegion"
      ],
      "type": "object",
      "example": {
        "addressLine1": "address_1",
        "addressLine2": "address_2",
        "addressLine3": "address_3",
        "city": "Seattle",
        "countryCode": "US",
        "county": "Washington",
        "district": "District1",
        "name": "address_name",
        "phoneNumber": "+14155552671",
        "postalCode": "123456",
        "stateOrRegion": "Washington"
      }
    },
    "CarrierCode": {
      "description": "Identifies the carrier that will deliver the shipment.",
      "properties": {
        "carrierCodeType": {
          "description": "Denotes the carrier type.",
          "$ref": "#/definitions/CarrierCodeType"
        },
        "carrierCodeValue": {
          "description": "Value of the carrier code.",
          "type": "string",
          "example": "TestCarrierCode"
        }
      },
      "type": "object",
      "example": {
        "carrierCodeType": "SCAC",
        "carrierCodeValue": "TestCarrierCode"
      }
    },
    "CarrierCodeType": {
      "description": "Denotes the type for the carrier.",
      "enum": [
        "SCAC"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Standard Carrier Alpha Code. Refer to [What is a Standard Carrier Alpha Code](https://www.help.cbp.gov/s/article/Article-1420?language=en_US) for more information.",
          "value": "SCAC"
        }
      ],
      "example": "SCAC"
    },
    "DestinationDetails": {
      "description": "Destination details of an inbound order based on the assigned region and DC for the order.",
      "properties": {
        "destinationAddress": {
          "description": "Destination address of the AWD facility where the shipment will be shipped to",
          "$ref": "#/definitions/Address"
        },
        "destinationRegion": {
          "description": "Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]",
          "type": "string",
          "example": "us-west"
        },
        "shipmentId": {
          "description": "Unique ID of the confirmed shipment being shipped to the assigned destination. This will be available only after an inbound order is confirmed and can be used to track the shipment.",
          "minLength": 1,
          "type": "string"
        }
      },
      "type": "object",
      "example": {
        "destinationAddress": {
          "addressLine1": "address_1",
          "addressLine2": "address_2",
          "addressLine3": "address_3",
          "city": "Seattle",
          "countryCode": "US",
          "county": "Washington",
          "district": "District1",
          "name": "address_name",
          "phoneNumber": "+14155552671",
          "postalCode": "123456",
          "stateOrRegion": "Washington"
        },
        "destinationRegion": "us-east"
      }
    },
    "DimensionUnitOfMeasurement": {
      "description": "Unit of measurement for package dimensions.",
      "enum": [
        "INCHES",
        "CENTIMETERS"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Denotes package dimensions in inches.",
          "value": "INCHES"
        },
        {
          "description": "Denotes package dimensions in centimeters.",
          "value": "CENTIMETERS"
        }
      ],
      "example": "INCHES"
    },
    "DistributionPackage": {
      "description": "Represents an AWD distribution package.",
      "properties": {
        "contents": {
          "description": "The contents appropriate for the type.",
          "$ref": "#/definitions/DistributionPackageContents"
        },
        "measurements": {
          "description": "Measurements of a package, including weight, volume, and dimensions.",
          "$ref": "#/definitions/MeasurementData"
        },
        "type": {
          "description": "Type of distribution package.",
          "$ref": "#/definitions/DistributionPackageType"
        }
      },
      "required": [
        "contents",
        "measurements",
        "type"
      ],
      "type": "object",
      "example": {
        "contents": {
          "products": [
            {
              "quantity": 1,
              "sku": "testPen",
              "expiration": "2025-06-07T12:12:09.061Z",
              "prepDetails": {
                "prepCategory": "PERFORATED",
                "prepOwner": "AMAZON",
                "labelOwner": "SELF",
                "prepInstructions": [{
                  "prepType": "ITEM_POLYBAGGING",
                  "prepOwner": "AMAZON"
                }]
              }
            }
          ]
        },
        "measurements": {
          "dimensions": {
            "height": 1,
            "length": 1,
            "unitOfMeasurement": "INCHES",
            "width": 1
          },
          "volume": {
            "unitOfMeasurement": "CUIN",
            "volume": 1
          },
          "weight": {
            "unitOfMeasurement": "POUNDS",
            "weight": 1
          }
        },
        "type": "CASE"
      }
    },
    "DistributionPackageContents": {
      "description": "Represents the contents inside a package, which can be products or a nested package.",
      "properties": {
        "packages": {
          "description": "This is required only when `DistributionPackageType=PALLET`.",
          "items": {
            "$ref": "#/definitions/DistributionPackageQuantity"
          },
          "type": "array"
        },
        "products": {
          "description": "This is required only when `DistributionPackageType=CASE`.",
          "items": {
            "$ref": "#/definitions/ProductQuantity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DistributionPackageQuantity": {
      "description": "Represents a distribution package with its respective quantity.",
      "properties": {
        "count": {
          "description": "Number of cases or pallets with the same package configuration.",
          "format": "int32",
          "type": "integer"
        },
        "distributionPackage": {
          "$ref": "#/definitions/DistributionPackage"
        }
      },
      "required": [
        "count",
        "distributionPackage"
      ],
      "type": "object",
      "example": {
        "count": 1,
        "distributionPackage": {
          "contents": {
            "products": [
              {
                "quantity": 1,
                "sku": "testPen",
                "expiration": "2025-06-07T12:12:09.061Z",
                "prepDetails": {
                  "prepCategory": "PERFORATED",
                  "prepOwner": "AMAZON",
                  "labelOwner": "SELF",
                  "prepInstructions": [{
                    "prepType": "ITEM_POLYBAGGING",
                    "prepOwner": "AMAZON"
                  }]
                }
              }
            ]
          },
          "measurements": {
            "dimensions": {
              "height": 1,
              "length": 1,
              "unitOfMeasurement": "INCHES",
              "width": 1
            },
            "volume": {
              "unitOfMeasurement": "CUIN",
              "volume": 1
            },
            "weight": {
              "unitOfMeasurement": "POUNDS",
              "weight": 1
            }
          },
          "type": "CASE"
        }
      }
    },
    "DistributionPackageType": {
      "description": "Type of distribution packages.",
      "enum": [
        "CASE",
        "PALLET"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Package type `CASE`.",
          "value": "CASE"
        },
        {
          "description": "Package type `PALLET`. Currently, the `PALLET` package type is not supported.",
          "value": "PALLET"
        }
      ],
      "example": "CASE"
    },
    "Error": {
      "description": "Error response returned when the request is unsuccessful.",
      "properties": {
        "code": {
          "description": "An error code that identifies the type of error that occurred.",
          "type": "string"
        },
        "details": {
          "description": "Additional details that can help the caller understand or fix the issue.",
          "type": "string"
        },
        "message": {
          "description": "A message that describes the error condition.",
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "ErrorList": {
      "description": "This exception is thrown when client inputs are invalid.",
      "properties": {
        "errors": {
          "description": "A list of errors describing the failures.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "required": [
        "errors"
      ]
    },
    "InboundEligibility": {
      "description": "Represents the eligibility status of the inbound packages.",
      "properties": {
        "ineligibilityReasons": {
          "description": "If there are order level eligibility issues, then this list will contain those error codes and descriptions.",
          "items": {
            "$ref": "#/definitions/OrderIneligibilityReason"
          },
          "type": "array"
        },
        "packagesToInbound": {
          "description": "Details on SKU eligibility for each inbound package.",
          "items": {
            "$ref": "#/definitions/SkuEligibility"
          },
          "type": "array"
        },
        "previewedAt": {
          "description": "Timestamp when the eligibility check is performed.",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/InboundEligibilityStatus"
        }
      },
      "required": [
        "packagesToInbound",
        "previewedAt",
        "status"
      ],
      "type": "object"
    },
    "InboundEligibilityStatus": {
      "description": "Enum denoting the package inbound eligibility.",
      "enum": [
        "ELIGIBLE",
        "INELIGIBLE"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Eligible to inbound.",
          "value": "ELIGIBLE"
        },
        {
          "description": "Ineligible to inbound.",
          "value": "INELIGIBLE"
        }
      ]
    },
    "InboundOrder": {
      "description": "Represents an AWD inbound order.",
      "properties": {
        "createdAt": {
          "description": "Date when this order was created.",
          "format": "date-time",
          "type": "string"
        },
        "destinationDetails": {
          "description": "Destination details of an inbound order based on the assigned region and DC for the order.",
          "$ref": "#/definitions/DestinationDetails"
        },
        "externalReferenceId": {
          "description": "Reference ID that can be used to correlate the order with partner resources.",
          "type": "string",
          "example": "TestReferenceId"
        },
        "orderId": {
          "description": "Inbound order ID.",
          "type": "string"
        },
        "orderStatus": {
          "description": "Inbound order status.",
          "$ref": "#/definitions/InboundStatus"
        },
        "originAddress": {
          "description": "Origin address from where the inbound order will be shipped.",
          "$ref": "#/definitions/Address"
        },
        "packagesToInbound": {
          "description": "List of packages to be inbounded.",
          "items": {
            "$ref": "#/definitions/DistributionPackageQuantity"
          },
          "minItems": 1,
          "type": "array"
        },
        "preferences": {
          "$ref": "#/definitions/InboundPreferences"
        },
        "updatedAt": {
          "description": "Date when this order was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "orderId",
        "orderStatus",
        "originAddress",
        "packagesToInbound"
      ],
      "type": "object",
      "example": {
        "destinationDetails": {
          "destinationAddress": {
            "addressLine1": "address_1",
            "addressLine2": "address_2",
            "addressLine3": "address_3",
            "city": "Seattle",
            "countryCode": "US",
            "county": "Washington",
            "district": "District1",
            "name": "address_name",
            "phoneNumber": "+14155552671",
            "postalCode": "123456",
            "stateOrRegion": "Washington"
          },
          "destinationRegion": "us-east",
          "shipmentId": "TestShipmentId"
        },
        "createdAt": "2023-06-07T12:12:09.061Z",
        "externalReferenceId": "TestReferenceId",
        "orderId": "TestOrderId",
        "orderStatus": "DRAFT",
        "originAddress": {
          "addressLine1": "address_1",
          "addressLine2": "address_2",
          "addressLine3": "address_3",
          "city": "Seattle",
          "countryCode": "US",
          "county": "Washington",
          "district": "District1",
          "name": "address_name",
          "phoneNumber": "+14155552671",
          "postalCode": "123456",
          "stateOrRegion": "Washington"
        },
        "packagesToInbound": [
          {
            "count": 1,
            "distributionPackage": {
              "contents": {
                "packages": [],
                "products": [
                  {
                    "quantity": 1,
                    "sku": "testPen",
                    "expiration": "2025-06-07T12:12:09.061Z",
                    "prepDetails": {
                      "prepCategory": "PERFORATED",
                      "prepOwner": "AMAZON",
                      "labelOwner": "SELF",
                      "prepInstructions": [{
                        "prepType": "ITEM_POLYBAGGING",
                        "prepOwner": "AMAZON"
                      }]
                    }
                  }
                ]
              },
              "measurements": {
                "dimensions": {
                  "height": 2.54,
                  "length": 2.54,
                  "unitOfMeasurement": "CENTIMETERS",
                  "width": 2.54
                },
                "weight": {
                  "unitOfMeasurement": "KILOGRAMS",
                  "weight": 0.453592
                }
              },
              "type": "CASE"
            }
          }
        ],
        "updatedAt": "2023-06-07T12:12:09.061Z",
        "preferences": {
          "destinationRegion": "us-west"
        }
      }
    },
    "InboundOrderCreationData": {
      "description": "Payload for creating an inbound order.",
      "properties": {
        "externalReferenceId": {
          "description": "Reference ID that can be used to correlate the order with partner resources.",
          "type": "string",
          "example": "TestReferenceId"
        },
        "originAddress": {
          "description": "Origin address from where the inbound order will be shipped.",
          "$ref": "#/definitions/Address"
        },
        "packagesToInbound": {
          "description": "List of packages to be inbounded.",
          "items": {
            "$ref": "#/definitions/DistributionPackageQuantity"
          },
          "minItems": 1,
          "type": "array",
          "example": [
            {
              "count": 1,
              "distributionPackage": {
                "contents": {
                  "products": [
                    {
                      "quantity": 1,
                      "sku": "testPen"
                    }
                  ]
                },
                "measurements": {
                  "dimensions": {
                    "height": 1,
                    "length": 1,
                    "unitOfMeasurement": "INCHES",
                    "width": 1
                  },
                  "volume": {
                    "unitOfMeasurement": "CUIN",
                    "volume": 1
                  },
                  "weight": {
                    "unitOfMeasurement": "POUNDS",
                    "weight": 1
                  }
                },
                "type": "CASE"
              }
            }
          ]
        },
        "preferences": {
          "$ref": "#/definitions/InboundPreferences"
        }
      },
      "required": [
        "originAddress",
        "packagesToInbound"
      ],
      "type": "object",
      "example": {
        "externalReferenceId": "TestReferenceId",
        "originAddress": {
          "addressLine1": "address_1",
          "addressLine2": "address_2",
          "addressLine3": "address_3",
          "city": "City1",
          "countryCode": "CC",
          "district": "District1",
          "name": "address_name",
          "postalCode": "123456",
          "stateOrRegion": "State1"
        },
        "packagesToInbound": [
          {
            "count": 1,
            "distributionPackage": {
              "contents": {
                "products": [
                  {
                    "quantity": 1,
                    "sku": "testPen"
                  }
                ]
              },
              "measurements": {
                "dimensions": {
                  "height": 1,
                  "length": 1,
                  "unitOfMeasurement": "INCHES",
                  "width": 1
                },
                "volume": {
                  "unitOfMeasurement": "CUIN",
                  "volume": 1
                },
                "weight": {
                  "unitOfMeasurement": "POUNDS",
                  "weight": 1
                }
              },
              "type": "CASE"
            }
          }
        ],
        "preferences": {
          "destinationRegion": "us-west"
        }
      }
    },
    "InboundOrderReference": {
      "description": "A response that contains the reference identifiers for the newly created or updated inbound order. Consists of an order ID and version.",
      "properties": {
        "orderId": {
          "description": "Order ID of the inbound order.",
          "type": "string"
        }
      },
      "required": [
        "orderId"
      ],
      "type": "object"
    },
    "InboundPackages": {
      "description": "Represents the packages to inbound.",
      "properties": {
        "packagesToInbound": {
          "description": "List of packages to be inbounded.",
          "items": {
            "$ref": "#/definitions/DistributionPackageQuantity"
          },
          "minItems": 1,
          "type": "array",
          "example": [
            {
              "count": 1,
              "distributionPackage": {
                "contents": {
                  "products": [
                    {
                      "quantity": 1,
                      "sku": "testPen"
                    }
                  ]
                },
                "measurements": {
                  "dimensions": {
                    "height": 1,
                    "length": 1,
                    "unitOfMeasurement": "INCHES",
                    "width": 1
                  },
                  "volume": {
                    "unitOfMeasurement": "CUIN",
                    "volume": 1
                  },
                  "weight": {
                    "unitOfMeasurement": "POUNDS",
                    "weight": 1
                  }
                },
                "type": "CASE"
              }
            }
          ]
        }
      },
      "required": [
        "packagesToInbound"
      ],
      "type": "object",
      "example": {
        "packagesToInbound": [
          {
            "count": 1,
            "distributionPackage": {
              "contents": {
                "products": [
                  {
                    "quantity": 1,
                    "sku": "testPen"
                  }
                ]
              },
              "measurements": {
                "dimensions": {
                  "height": 1,
                  "length": 1,
                  "unitOfMeasurement": "INCHES",
                  "width": 1
                },
                "volume": {
                  "unitOfMeasurement": "CUIN",
                  "volume": 1
                },
                "weight": {
                  "unitOfMeasurement": "POUNDS",
                  "weight": 1
                }
              },
              "type": "CASE"
            }
          }
        ]
      }
    },
    "InboundPreferences": {
      "description": "Preferences that can be passed in context of an inbound order",
      "properties": {
        "destinationRegion": {
          "description": "Pass a preferred region so that the inbound order can be shipped to an AWD warehouse located in that region. This doesn't guarantee the order to be assigned in the specified destination region as it depends on warehouse capacity availability. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InboundShipment": {
      "description": "Represents an AWD inbound shipment.",
      "properties": {
        "carrierCode": {
          "description": "The shipment carrier code.",
          "$ref": "#/definitions/CarrierCode"
        },
        "createdAt": {
          "description": "Timestamp when the shipment was created. The date is returned in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.",
          "format": "date-time",
          "type": "string"
        },
        "destinationAddress": {
          "description": "Destination address for this shipment.",
          "$ref": "#/definitions/Address"
        },
        "externalReferenceId": {
          "description": "Client-provided reference ID that can correlate this shipment to client resources. For example, to map this shipment to an internal bookkeeping order record.",
          "type": "string",
          "example": "TestReferenceId"
        },
        "orderId": {
          "description": "The AWD inbound order ID that this inbound shipment belongs to.",
          "minLength": 1,
          "type": "string"
        },
        "originAddress": {
          "description": "Origin address for this shipment.",
          "$ref": "#/definitions/Address"
        },
        "receivedQuantity": {
          "description": "Quantity received (at the receiving end) as part of this shipment.",
          "items": {
            "$ref": "#/definitions/InventoryQuantity"
          },
          "type": "array"
        },
        "shipBy": {
          "description": "Timestamp when the shipment will be shipped.",
          "format": "date-time",
          "type": "string"
        },
        "shipmentContainerQuantities": {
          "description": "Packages that are part of this shipment.",
          "items": {
            "$ref": "#/definitions/DistributionPackageQuantity"
          },
          "type": "array"
        },
        "shipmentId": {
          "description": "Unique shipment ID.",
          "minLength": 1,
          "type": "string"
        },
        "shipmentSkuQuantities": {
          "description": "Quantity details at SKU level for the shipment. This attribute will only appear if the skuQuantities parameter in the request is set to SHOW.",
          "items": {
            "$ref": "#/definitions/SkuQuantity"
          },
          "type": "array"
        },
        "destinationRegion": {
          "description": "Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]",
          "type": "string",
          "example": "us-west"
        },
        "shipmentStatus": {
          "description": "Current status of this shipment.",
          "$ref": "#/definitions/InboundShipmentStatus"
        },
        "trackingId": {
          "description": "Carrier-unique tracking ID for this shipment.",
          "minLength": 1,
          "type": "string"
        },
        "updatedAt": {
          "description": "Timestamp when the shipment was updated. The date is returned in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.",
          "format": "date-time",
          "type": "string"
        },
        "warehouseReferenceId": {
          "description": "An AWD-provided reference ID that you can use to interact with the warehouse. For example, a carrier appointment booking.",
          "type": "string",
          "example": "TestWarehouseReferenceId"
        }
      },
      "required": [
        "destinationAddress",
        "orderId",
        "originAddress",
        "shipmentContainerQuantities",
        "shipmentId",
        "shipmentStatus"
      ],
      "type": "object"
    },
    "InboundShipmentStatus": {
      "description": "Possible shipment statuses used by shipments.",
      "enum": [
        "CREATED",
        "SHIPPED",
        "IN_TRANSIT",
        "RECEIVING",
        "DELIVERED",
        "CLOSED",
        "CANCELLED"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Shipment is created but has not yet shipped.",
          "value": "CREATED"
        },
        {
          "description": "Shipment was picked up by the carrier or was dropped off with the carrier.",
          "value": "SHIPPED"
        },
        {
          "description": "The carrier has notified AWD that the shipment is in transit between origin and destination node.",
          "value": "IN_TRANSIT"
        },
        {
          "description": "The shipment has been partially received.",
          "value": "RECEIVING"
        },
        {
          "description": "The shipment has reached the destination node and has been delivered to the facility yard. The shipment receive process at the warehouse will start soon.",
          "value": "DELIVERED"
        },
        {
          "description": "No more actions required on the shipment. This is a final state.",
          "value": "CLOSED"
        },
        {
          "description": "Shipment has been cancelled. This is a final state.",
          "value": "CANCELLED"
        }
      ]
    },
    "InboundShipmentSummary": {
      "description": "Summary for an AWD inbound shipment containing the shipment ID, which can be used to retrieve the actual shipment.",
      "properties": {
        "createdAt": {
          "description": "Timestamp when the shipment was created.",
          "format": "date-time",
          "type": "string"
        },
        "externalReferenceId": {
          "description": "Optional client-provided reference ID that can be used to correlate this shipment with client resources. For example, to map this shipment to an internal bookkeeping order record.",
          "type": "string",
          "example": "TestReferenceId"
        },
        "orderId": {
          "description": "The AWD inbound order ID that this inbound shipment belongs to.",
          "minLength": 1,
          "type": "string"
        },
        "shipmentId": {
          "description": "A unique shipment ID.",
          "minLength": 1,
          "type": "string"
        },
        "shipmentStatus": {
          "$ref": "#/definitions/InboundShipmentStatus"
        },
        "updatedAt": {
          "description": "Timestamp when the shipment was updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "orderId",
        "shipmentId",
        "shipmentStatus"
      ],
      "type": "object"
    },
    "InboundStatus": {
      "description": "The supported statuses for an inbound order.",
      "enum": [
        "DRAFT",
        "VALIDATING",
        "CONFIRMED",
        "CLOSED",
        "EXPIRED",
        "CANCELLED"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "A newly created inbound order will start in this state.",
          "value": "DRAFT"
        },
        {
          "description": "The order is in this state while being updated. Once updated, the order will enter the updated state.",
          "value": "VALIDATING"
        },
        {
          "description": "The order enters this state as soon as the order is confirmed.",
          "value": "CONFIRMED"
        },
        {
          "description": "The order enters this state when all associated shipments are closed.",
          "value": "CLOSED"
        },
        {
          "description": "The order enters this state if it is not confirmed within a time limit.",
          "value": "EXPIRED"
        },
        {
          "description": "The order enters this state when it is cancelled.",
          "value": "CANCELLED"
        }
      ]
    },
    "ExpirationDetails": {
      "description": "The expiration details of the inventory. This object will only appear if the details parameter in the request is set to `SHOW`.",
      "properties": {
        "expiration": {
          "description": "The expiration date of the SKU.",
          "format": "date-time",
          "type": "string"
        },
        "onhandQuantity": {
          "description": "The quantity that is present in AWD.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InventoryDetails": {
      "description": "Additional inventory details. This object is only displayed if the details parameter in the request is set to `SHOW`.",
      "properties": {
        "availableDistributableQuantity": {
          "description": "Quantity that is available for downstream channel replenishment.",
          "format": "int64",
          "type": "integer"
        },
        "replenishmentQuantity": {
          "description": "Quantity that is in transit from AWD and has not yet been received at FBA.",
          "format": "int64",
          "type": "integer"
        },
        "reservedDistributableQuantity": {
          "description": "Quantity that is reserved for a downstream channel replenishment order that is being prepared for shipment.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InventoryListing": {
      "description": "AWD inventory payload.",
      "properties": {
        "inventory": {
          "description": "List of inventory summaries.",
          "items": {
            "$ref": "#/definitions/InventorySummary"
          },
          "type": "array"
        },
        "nextToken": {
          "description": "A token that is used to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `maxResults` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.",
          "type": "string",
          "example": "SampleToken"
        }
      },
      "required": [
        "inventory"
      ],
      "type": "object"
    },
    "InventoryQuantity": {
      "description": "Quantity of inventory with an associated measurement unit context.",
      "properties": {
        "quantity": {
          "description": "Quantity of the respective inventory.",
          "type": "number"
        },
        "unitOfMeasurement": {
          "description": "Unit of measurement for the inventory.",
          "$ref": "#/definitions/InventoryUnitOfMeasurement"
        }
      },
      "required": [
        "quantity",
        "unitOfMeasurement"
      ],
      "type": "object"
    },
    "InventorySummary": {
      "description": "Summary of inventory per SKU.",
      "properties": {
        "expirationDetails": {
          "description": "The expiration details of the inventory. This object will only appear if the `details` parameter in the request is set to `SHOW`.",
          "items": {
            "$ref": "#/definitions/ExpirationDetails"
          },
          "type": "array"
        },
        "inventoryDetails": {
          "$ref": "#/definitions/InventoryDetails"
        },
        "sku": {
          "description": "The seller or merchant SKU.",
          "type": "string"
        },
        "totalInboundQuantity": {
          "description": "Total quantity that is in-transit from the seller and has not yet been received at an AWD Distribution Center",
          "format": "int64",
          "type": "integer"
        },
        "totalOnhandQuantity": {
          "description": "Total quantity that is present in AWD distribution centers.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "sku"
      ],
      "type": "object"
    },
    "InventoryUnitOfMeasurement": {
      "description": "Unit of measurement for the inventory.",
      "enum": [
        "PRODUCT_UNITS",
        "CASES",
        "PALLETS"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Measures a discrete amount of product units.",
          "value": "PRODUCT_UNITS"
        },
        {
          "description": "Measures a discrete amount of cases.",
          "value": "CASES"
        },
        {
          "description": "Measures a discrete amount of pallets.",
          "value": "PALLETS"
        }
      ]
    },
    "LabelOwner": {
      "description": "The entity that labels the products.",
      "enum": [
        "AMAZON",
        "SELF"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Amazon labels the products.",
          "value": "AMAZON"
        },
        {
          "description": "The seller labels the products.",
          "value": "SELF"
        }
      ]
    },
    "LabelStatus": {
      "description": "The status of your label.",
      "enum": [
        "GENERATING",
        "GENERATED",
        "GENERATION_FAILED",
        "NOT_READY"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Labels are being generated.",
          "value": "GENERATING"
        },
        {
          "description": "Labels are generated.",
          "value": "GENERATED"
        },
        {
          "description": "Label generation failed.",
          "value": "GENERATION_FAILED"
        },
        {
          "description": "Not yet ready to start label generation.",
          "value": "NOT_READY"
        }
      ]
    },
    "MeasurementData": {
      "description": "Package weight and dimension.",
      "properties": {
        "dimensions": {
          "description": "Dimensions of the package. Dimensions are required when creating an inbound or outbound order.",
          "$ref": "#/definitions/PackageDimensions"
        },
        "volume": {
          "description": "Volume of the package.",
          "$ref": "#/definitions/PackageVolume"
        },
        "weight": {
          "description": "Weight of the package.",
          "$ref": "#/definitions/PackageWeight"
        }
      },
      "required": [
        "weight"
      ],
      "type": "object"
    },
    "OrderIneligibilityReason": {
      "description": "Represents one ineligibility reason for the order (there can be multiple reasons).",
      "properties": {
        "code": {
          "description": "Code for the order ineligibility.",
          "type": "string",
          "example": "INVALID_MSKU"
        },
        "description": {
          "description": "Description detailing the ineligibility reason of the order.",
          "type": "string",
          "example": "The MSKU passed as part of order is invalid"
        }
      },
      "required": [
        "code",
        "description"
      ],
      "type": "object",
      "example": {
        "code": "INVALID_MSKU",
        "description": "The MSKU of an invalid order."
      }
    },
    "PackageDimensions": {
      "description": "Dimensions of the package.",
      "properties": {
        "height": {
          "description": "Height of the package.",
          "format": "double",
          "type": "number"
        },
        "length": {
          "description": "Length of the package.",
          "format": "double",
          "type": "number"
        },
        "unitOfMeasurement": {
          "description": "Unit of measurement for package dimensions.",
          "$ref": "#/definitions/DimensionUnitOfMeasurement"
        },
        "width": {
          "description": "Width of the package.",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "height",
        "length",
        "unitOfMeasurement",
        "width"
      ],
      "type": "object"
    },
    "PackageVolume": {
      "description": "Represents the volume of the package with a unit of measurement.",
      "properties": {
        "unitOfMeasurement": {
          "description": "Unit of measurement for the package volume.",
          "$ref": "#/definitions/VolumeUnitOfMeasurement"
        },
        "volume": {
          "description": "The package volume value.",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "unitOfMeasurement",
        "volume"
      ],
      "type": "object"
    },
    "PackageWeight": {
      "description": "Represents the weight of the package with a unit of measurement.",
      "properties": {
        "unitOfMeasurement": {
          "description": "Unit of measurement for the package weight.",
          "$ref": "#/definitions/WeightUnitOfMeasurement"
        },
        "weight": {
          "description": "The package weight value.",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "unitOfMeasurement",
        "weight"
      ],
      "type": "object"
    },
    "PrepDetails": {
      "description": "The preparation details for a product. This contains the prep category, prep owner, and label owner.\nPrep instructions are generated based on the specified category.",
      "properties": {
        "labelOwner": {
          "$ref": "#/definitions/LabelOwner"
        },
        "prepCategory": {
          "description": "The preparation category for shipping an item to Amazon's fulfillment network.",
          "$ref": "#/definitions/PrepCategory"
        },
        "prepInstructions": {
          "description": "Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the `prepCategory`, and if you attempt to pass a value for this field, the system will ignore it.",
          "items": {
            "$ref": "#/definitions/PrepInstruction"
          },
          "type": "array"
        },
        "prepOwner": {
          "$ref": "#/definitions/PrepOwner"
        }
      },
      "type": "object"
    },
    "PrepCategory": {
      "description": "The preparation category for shipping an item to Amazon's fulfillment network.",
      "enum": [
        "ADULT",
        "BABY",
        "FC_PROVIDED",
        "FRAGILE",
        "GRANULAR",
        "HANGER",
        "LIQUID",
        "PERFORATED",
        "SET",
        "SHARP",
        "SMALL",
        "TEXTILE",
        "NO_PREP",
        "UNKNOWN"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "value": "ADULT",
          "description": "Displays potentially offensive material such as profanity or nudity."
        },
        {
          "value": "BABY",
          "description": "Made for a child aged three years or younger, packaging with cutouts greater than one square inch."
        },
        {
          "value": "FC_PROVIDED",
          "description": "A prep type has been defined by the Fulfillment Center. This value is provided by Amazon and cannot be used as an input."
        },
        {
          "value": "FRAGILE",
          "description": "Glass or otherwise fragile, or a liquid in a glass container."
        },
        {
          "value": "GRANULAR",
          "description": "Made of powder, pellets, or granular material."
        },
        {
          "value": "HANGER",
          "description": "Made of cloth or fabric and intended to be put on a hanger."
        },
        {
          "value": "LIQUID",
          "description": "Liquid or viscous without a double seal."
        },
        {
          "value": "PERFORATED",
          "description": "In packaging that has a perforated opening."
        },
        {
          "value": "SET",
          "description": "Multiple items that are sold as one unit."
        },
        {
          "value": "SHARP",
          "description": "Sharp and easily exposed, not already contained in protective packaging."
        },
        {
          "value": "SMALL",
          "description": "Longest side less than 2 1/8 inches (width of a credit card)."
        },
        {
          "value": "TEXTILE",
          "description": "Made of cloth or fabric that could be damaged by dirt, dust, moisture, or liquid."
        },
        {
          "value": "NO_PREP",
          "description": "Does not require prep."
        },
        {
          "value": "UNKNOWN",
          "description": "An unknown prep category was found. This value is provided by Amazon and cannot be used as an input."
        }
      ]
    },
    "PrepInstruction": {
      "description": "Information pertaining to the preparation of inbound products.",
      "properties": {
        "prepOwner": {
          "$ref": "#/definitions/PrepOwner"
        },
        "prepType": {
          "description": "The type of preparation to be done. For more information about preparing items, refer to [Prep guidance](https://sellercentral.amazon.com/help/hub/reference/external/GF4G7547KSLDX2KC) on Seller Central.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrepOwner": {
      "description": "The owner of the preparations, if special preparations are required.",
      "enum": [
        "AMAZON",
        "SELF"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Amazon owns the preparation.",
          "value": "AMAZON"
        },
        {
          "description": "The seller owns the preparation",
          "value": "SELF"
        }
      ]
    },
    "ProductAttribute": {
      "description": "Product instance attribute that is not described at the SKU level in the catalog.",
      "properties": {
        "name": {
          "description": "Product attribute name.",
          "type": "string",
          "example": "TestAttribute"
        },
        "value": {
          "description": "Product attribute value.",
          "type": "string",
          "example": "TestAttributeValue"
        }
      },
      "type": "object",
      "example": {
        "name": "TestAttribute",
        "value": "TestAttributeValue"
      }
    },
    "ProductQuantity": {
      "description": "Represents a product with the SKU details and the corresponding quantity.",
      "properties": {
        "attributes": {
          "description": "Contains attributes for this instance of the product. For example, item color, or other attributes that distinguish the product beyond the SKU. This is metadata for the product and Amazon does not process this data.",
          "items": {
            "$ref": "#/definitions/ProductAttribute"
          },
          "type": "array",
          "example": {
            "name": "TestAttribute",
            "value": "TestAttributeValue"
          }
        },
        "quantity": {
          "description": "Product quantity.",
          "format": "int32",
          "type": "integer"
        },
        "sku": {
          "description": "The seller or merchant SKU.",
          "type": "string"
        },
        "expiration": {
          "description": "The expiration date for the SKU. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.",
          "format": "date-time",
          "type": "string"
        },
        "prepDetails": {
          "description": "Preparation details of a product which contains the prep category, prep owner and the label owner.\nIf not passed while creating an inbound order, NO_PREP will be used on the product by-default.\nPrep instructions will be generated based on the category passed",
          "$ref": "#/definitions/PrepDetails"
        }
      },
      "required": [
        "quantity",
        "sku"
      ],
      "type": "object"
    },
    "ShipmentLabels": {
      "description": "Shipment labels.",
      "properties": {
        "labelDownloadURL": {
          "description": "The URL to download shipment labels. The URL is active for 600 seconds from generation.",
          "type": "string"
        },
        "labelStatus": {
          "description": "Status of label generation.",
          "$ref": "#/definitions/LabelStatus"
        }
      },
      "required": [
        "labelStatus"
      ],
      "type": "object"
    },
    "ShipmentListing": {
      "description": "A list of inbound shipment summaries filtered by the attributes specified in the request.",
      "properties": {
        "nextToken": {
          "description": "A token that is used to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `maxResults` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.",
          "type": "string",
          "example": "SampleToken"
        },
        "shipments": {
          "description": "List of inbound shipment summaries.",
          "items": {
            "$ref": "#/definitions/InboundShipmentSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SkuEligibility": {
      "description": "Represents eligibility of one SKU.",
      "properties": {
        "ineligibilityReasons": {
          "description": "If not eligible, these are list of error codes and descriptions.",
          "items": {
            "$ref": "#/definitions/SkuIneligibilityReason"
          },
          "type": "array"
        },
        "packageQuantity": {
          "$ref": "#/definitions/DistributionPackageQuantity"
        },
        "status": {
          "$ref": "#/definitions/InboundEligibilityStatus"
        }
      },
      "required": [
        "packageQuantity",
        "status"
      ],
      "type": "object"
    },
    "SkuIneligibilityReason": {
      "description": "Represents the ineligibility reason for one SKU.",
      "properties": {
        "code": {
          "description": "Code for the SKU ineligibility.",
          "type": "string"
        },
        "description": {
          "description": "Detailed description of the SKU ineligibility.",
          "type": "string"
        }
      },
      "required": [
        "code",
        "description"
      ],
      "type": "object"
    },
    "SkuQuantity": {
      "description": "Quantity details for a SKU as part of a shipment",
      "properties": {
        "expectedQuantity": {
          "$ref": "#/definitions/InventoryQuantity"
        },
        "receivedQuantity": {
          "$ref": "#/definitions/InventoryQuantity"
        },
        "sku": {
          "description": "The merchant stock keeping unit",
          "type": "string"
        }
      },
      "required": [
        "expectedQuantity",
        "sku"
      ],
      "type": "object"
    },
    "TrackingDetails": {
      "description": "Tracking details for the shipment. If using SPD transportation, this can be for each case. If not using SPD transportation, this is a single tracking entry for the entire shipment.",
      "properties": {
        "carrierCode": {
          "description": "Unique or identifying code for the carrier.",
          "$ref": "#/definitions/CarrierCode"
        },
        "bookingId": {
          "description": "The identifier that is received from transportation to uniquely identify a booking.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "bookingId"
      ],
      "type": "object"
    },
    "TransportationDetails": {
      "description": "Transportation details for the shipment.",
      "properties": {
        "trackingDetails": {
          "description": "Tracking details for the shipment. If using SPD transportation, this can be for each case. If not using SPD transportation, this is a single tracking entry for the entire shipment.",
          "items": {
            "$ref": "#/definitions/TrackingDetails"
          },
          "type": "array"
        }
      },
      "required": [
        "trackingDetails"
      ],
      "type": "object",
      "example": {
        "trackingDetails": [
          {
            "carrierCode": {
              "carrierCodeType": "SCAC"
            },
            "bookingId": "TRACKING_ID"
          }
        ]
      }
    },
    "VolumeUnitOfMeasurement": {
      "description": "Unit of measurement for the package volume.",
      "enum": [
        "CU_IN",
        "CBM",
        "CC"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Denotes volume measurement in cubic inches.",
          "value": "CU_IN"
        },
        {
          "description": "Denotes volume measurement in cubic meters.",
          "value": "CBM"
        },
        {
          "description": "Denotes volume measurement in cubic centimeters.",
          "value": "CC"
        }
      ]
    },
    "WeightUnitOfMeasurement": {
      "description": "Unit of measurement for the package weight.",
      "enum": [
        "POUNDS",
        "KILOGRAMS"
      ],
      "type": "string",
      "x-docgen-enum-table-extension": [
        {
          "description": "Denotes weight measurement in pounds.",
          "value": "POUNDS"
        },
        {
          "description": "Denotes weight measurement in kilograms.",
          "value": "KILOGRAMS"
        }
      ]
    }
  }
}