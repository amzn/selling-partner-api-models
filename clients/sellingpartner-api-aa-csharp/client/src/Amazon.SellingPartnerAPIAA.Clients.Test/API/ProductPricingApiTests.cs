/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.API;
using Amazon.SellingPartnerAPIAA.Clients.Models.Pricing;

namespace Amazon.SellingPartnerAPIAA.Clients.Test
{
    /// <summary>
    ///  Class for testing ProductPricingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductPricingApiTests
    {
        private ProductPricingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to initialize instance for testing
            //instance = new ProductPricingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductPricingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductPricingApi
            //Assert.IsInstanceOfType(typeof(ProductPricingApi), instance, "instance is a ProductPricingApi");
        }

        
        /// <summary>
        /// Test GetCompetitivePricing
        /// </summary>
        [Test]
        public void GetCompetitivePricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceId = null;
            //string itemType = null;
            //List<string> asins = null;
            //List<string> skus = null;
            //string customerType = null;
            //var response = instance.GetCompetitivePricing(marketplaceId, itemType, asins, skus, customerType);
            //Assert.IsInstanceOf<GetPricingResponse> (response, "response is GetPricingResponse");
        }
        
        /// <summary>
        /// Test GetItemOffers
        /// </summary>
        [Test]
        public void GetItemOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceId = null;
            //string itemCondition = null;
            //string asin = null;
            //string customerType = null;
            //var response = instance.GetItemOffers(marketplaceId, itemCondition, asin, customerType);
            //Assert.IsInstanceOf<GetOffersResponse> (response, "response is GetOffersResponse");
        }
        
        /// <summary>
        /// Test GetItemOffersBatch
        /// </summary>
        [Test]
        public void GetItemOffersBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetItemOffersBatchRequest getItemOffersBatchRequestBody = null;
            //var response = instance.GetItemOffersBatch(getItemOffersBatchRequestBody);
            //Assert.IsInstanceOf<GetItemOffersBatchResponse> (response, "response is GetItemOffersBatchResponse");
        }
        
        /// <summary>
        /// Test GetListingOffers
        /// </summary>
        [Test]
        public void GetListingOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceId = null;
            //string itemCondition = null;
            //string sellerSKU = null;
            //string customerType = null;
            //var response = instance.GetListingOffers(marketplaceId, itemCondition, sellerSKU, customerType);
            //Assert.IsInstanceOf<GetOffersResponse> (response, "response is GetOffersResponse");
        }
        
        /// <summary>
        /// Test GetListingOffersBatch
        /// </summary>
        [Test]
        public void GetListingOffersBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetListingOffersBatchRequest getListingOffersBatchRequestBody = null;
            //var response = instance.GetListingOffersBatch(getListingOffersBatchRequestBody);
            //Assert.IsInstanceOf<GetListingOffersBatchResponse> (response, "response is GetListingOffersBatchResponse");
        }
        
        /// <summary>
        /// Test GetPricing
        /// </summary>
        [Test]
        public void GetPricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceId = null;
            //string itemType = null;
            //List<string> asins = null;
            //List<string> skus = null;
            //string itemCondition = null;
            //string offerType = null;
            //var response = instance.GetPricing(marketplaceId, itemType, asins, skus, itemCondition, offerType);
            //Assert.IsInstanceOf<GetPricingResponse> (response, "response is GetPricingResponse");
        }
        
    }

}
