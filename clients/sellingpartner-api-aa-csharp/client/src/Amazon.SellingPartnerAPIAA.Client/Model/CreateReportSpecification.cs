/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Client.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Client.Model
{
    /// <summary>
    /// Information required to create the report.
    /// </summary>
    [DataContract]
    public partial class CreateReportSpecification :  IEquatable<CreateReportSpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReportSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateReportSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReportSpecification" /> class.
        /// </summary>
        /// <param name="reportOptions">reportOptions.</param>
        /// <param name="reportType">The report type. (required).</param>
        /// <param name="dataStartTime">The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this..</param>
        /// <param name="dataEndTime">The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this..</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise. (required).</param>
        public CreateReportSpecification(ReportOptions reportOptions = default(ReportOptions), string reportType = default(string), DateTime? dataStartTime = default(DateTime?), DateTime? dataEndTime = default(DateTime?), List<string> marketplaceIds = default(List<string>))
        {
            // to ensure "reportType" is required (not null)
            if (reportType == null)
            {
                throw new InvalidDataException("reportType is a required property for CreateReportSpecification and cannot be null");
            }
            else
            {
                this.ReportType = reportType;
            }
            // to ensure "marketplaceIds" is required (not null)
            if (marketplaceIds == null)
            {
                throw new InvalidDataException("marketplaceIds is a required property for CreateReportSpecification and cannot be null");
            }
            else
            {
                this.MarketplaceIds = marketplaceIds;
            }
            this.ReportOptions = reportOptions;
            this.DataStartTime = dataStartTime;
            this.DataEndTime = dataEndTime;
        }
        
        /// <summary>
        /// Gets or Sets ReportOptions
        /// </summary>
        [DataMember(Name="reportOptions", EmitDefaultValue=false)]
        public ReportOptions ReportOptions { get; set; }

        /// <summary>
        /// The report type.
        /// </summary>
        /// <value>The report type.</value>
        [DataMember(Name="reportType", EmitDefaultValue=false)]
        public string ReportType { get; set; }

        /// <summary>
        /// The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
        /// </summary>
        /// <value>The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.</value>
        [DataMember(Name="dataStartTime", EmitDefaultValue=false)]
        public DateTime? DataStartTime { get; set; }

        /// <summary>
        /// The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
        /// </summary>
        /// <value>The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.</value>
        [DataMember(Name="dataEndTime", EmitDefaultValue=false)]
        public DateTime? DataEndTime { get; set; }

        /// <summary>
        /// A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
        /// </summary>
        /// <value>A list of marketplace identifiers. The report document&#39;s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.</value>
        [DataMember(Name="marketplaceIds", EmitDefaultValue=false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateReportSpecification {\n");
            sb.Append("  ReportOptions: ").Append(ReportOptions).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  DataStartTime: ").Append(DataStartTime).Append("\n");
            sb.Append("  DataEndTime: ").Append(DataEndTime).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateReportSpecification);
        }

        /// <summary>
        /// Returns true if CreateReportSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateReportSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReportSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReportOptions == input.ReportOptions ||
                    (this.ReportOptions != null &&
                    this.ReportOptions.Equals(input.ReportOptions))
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) && 
                (
                    this.DataStartTime == input.DataStartTime ||
                    (this.DataStartTime != null &&
                    this.DataStartTime.Equals(input.DataStartTime))
                ) && 
                (
                    this.DataEndTime == input.DataEndTime ||
                    (this.DataEndTime != null &&
                    this.DataEndTime.Equals(input.DataEndTime))
                ) && 
                (
                    this.MarketplaceIds == input.MarketplaceIds ||
                    this.MarketplaceIds != null &&
                    this.MarketplaceIds.SequenceEqual(input.MarketplaceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportOptions != null)
                    hashCode = hashCode * 59 + this.ReportOptions.GetHashCode();
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.DataStartTime != null)
                    hashCode = hashCode * 59 + this.DataStartTime.GetHashCode();
                if (this.DataEndTime != null)
                    hashCode = hashCode * 59 + this.DataEndTime.GetHashCode();
                if (this.MarketplaceIds != null)
                    hashCode = hashCode * 59 + this.MarketplaceIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
