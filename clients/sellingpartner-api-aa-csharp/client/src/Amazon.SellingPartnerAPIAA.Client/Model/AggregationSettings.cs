/* 
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, see the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Client.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Client.Model
{
    /// <summary>
    /// A container that holds all of the necessary properties to configure the aggregation of notifications.
    /// </summary>
    [DataContract]
    public partial class AggregationSettings :  IEquatable<AggregationSettings>, IValidatableObject
    {
        /// <summary>
        /// The supported time period to use to perform marketplace-ASIN level aggregation.
        /// </summary>
        /// <value>The supported time period to use to perform marketplace-ASIN level aggregation.</value>
        [DataMember(Name="aggregationTimePeriod", EmitDefaultValue=false)]
        public AggregationTimePeriod AggregationTimePeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregationSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationSettings" /> class.
        /// </summary>
        /// <param name="aggregationTimePeriod">The supported time period to use to perform marketplace-ASIN level aggregation. (required).</param>
        public AggregationSettings(AggregationTimePeriod aggregationTimePeriod = default(AggregationTimePeriod))
        {
            // to ensure "aggregationTimePeriod" is required (not null)
            if (aggregationTimePeriod == null)
            {
                throw new InvalidDataException("aggregationTimePeriod is a required property for AggregationSettings and cannot be null");
            }
            else
            {
                this.AggregationTimePeriod = aggregationTimePeriod;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregationSettings {\n");
            sb.Append("  AggregationTimePeriod: ").Append(AggregationTimePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregationSettings);
        }

        /// <summary>
        /// Returns true if AggregationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AggregationTimePeriod == input.AggregationTimePeriod ||
                    (this.AggregationTimePeriod != null &&
                    this.AggregationTimePeriod.Equals(input.AggregationTimePeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregationTimePeriod != null)
                    hashCode = hashCode * 59 + this.AggregationTimePeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
