/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Amazon.SellingPartnerAPIAA.Client.Model
{
    /// <summary>
    /// ListingOffersResponse
    /// </summary>
    [DataContract]
    public partial class ListingOffersResponse : BatchOffersResponse, IEquatable<ListingOffersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingOffersResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListingOffersResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingOffersResponse" /> class.
        /// </summary>
        /// <param name="request">request.</param>
        public ListingOffersResponse(ListingOffersRequestParams request = default(ListingOffersRequestParams), HttpResponseHeaders headers = default(HttpResponseHeaders), GetOffersHttpStatusLine status = default(GetOffersHttpStatusLine), GetOffersResponse body = default(GetOffersResponse)) : base(headers, status, body)
        {
            this.Request = request;
        }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "request", EmitDefaultValue = false)]
        public ListingOffersRequestParams Request { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingOffersResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingOffersResponse);
        }

        /// <summary>
        /// Returns true if ListingOffersResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingOffersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingOffersResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
