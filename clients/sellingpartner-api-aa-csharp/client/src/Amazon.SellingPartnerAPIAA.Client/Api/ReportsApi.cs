/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Client.Client;
using Amazon.SellingPartnerAPIAA.Client.Model;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns></returns>
        void CancelReport (string reportId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelReportWithHttpInfo (string reportId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns></returns>
        void CancelReportSchedule (string reportScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelReportScheduleWithHttpInfo (string reportScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateReportResponse</returns>
        CreateReportResponse CreateReport (CreateReportSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateReportResponse</returns>
        ApiResponse<CreateReportResponse> CreateReportWithHttpInfo (CreateReportSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateReportScheduleResponse</returns>
        CreateReportScheduleResponse CreateReportSchedule (CreateReportScheduleSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateReportScheduleResponse</returns>
        ApiResponse<CreateReportScheduleResponse> CreateReportScheduleWithHttpInfo (CreateReportScheduleSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Report</returns>
        Report GetReport (string reportId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of Report</returns>
        ApiResponse<Report> GetReportWithHttpInfo (string reportId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>ReportDocument</returns>
        ReportDocument GetReportDocument (string reportDocumentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>ApiResponse of ReportDocument</returns>
        ApiResponse<ReportDocument> GetReportDocumentWithHttpInfo (string reportDocumentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ReportSchedule</returns>
        ReportSchedule GetReportSchedule (string reportScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of ReportSchedule</returns>
        ApiResponse<ReportSchedule> GetReportScheduleWithHttpInfo (string reportScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>ReportScheduleList</returns>
        ReportScheduleList GetReportSchedules (List<string> reportTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>ApiResponse of ReportScheduleList</returns>
        ApiResponse<ReportScheduleList> GetReportSchedulesWithHttpInfo (List<string> reportTypes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>GetReportsResponse</returns>
        GetReportsResponse GetReports (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>ApiResponse of GetReportsResponse</returns>
        ApiResponse<GetReportsResponse> GetReportsWithHttpInfo (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelReportAsync (string reportId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelReportAsyncWithHttpInfo (string reportId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelReportScheduleAsync (string reportScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelReportScheduleAsyncWithHttpInfo (string reportScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateReportResponse</returns>
        System.Threading.Tasks.Task<CreateReportResponse> CreateReportAsync (CreateReportSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReportResponse>> CreateReportAsyncWithHttpInfo (CreateReportSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateReportScheduleResponse</returns>
        System.Threading.Tasks.Task<CreateReportScheduleResponse> CreateReportScheduleAsync (CreateReportScheduleSpecification body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateReportScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReportScheduleResponse>> CreateReportScheduleAsyncWithHttpInfo (CreateReportScheduleSpecification body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of Report</returns>
        System.Threading.Tasks.Task<Report> GetReportAsync (string reportId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (Report)</returns>
        System.Threading.Tasks.Task<ApiResponse<Report>> GetReportAsyncWithHttpInfo (string reportId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>Task of ReportDocument</returns>
        System.Threading.Tasks.Task<ReportDocument> GetReportDocumentAsync (string reportDocumentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>Task of ApiResponse (ReportDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportDocument>> GetReportDocumentAsyncWithHttpInfo (string reportDocumentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ReportSchedule</returns>
        System.Threading.Tasks.Task<ReportSchedule> GetReportScheduleAsync (string reportScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (ReportSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportSchedule>> GetReportScheduleAsyncWithHttpInfo (string reportScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>Task of ReportScheduleList</returns>
        System.Threading.Tasks.Task<ReportScheduleList> GetReportSchedulesAsync (List<string> reportTypes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>Task of ApiResponse (ReportScheduleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportScheduleList>> GetReportSchedulesAsyncWithHttpInfo (List<string> reportTypes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of GetReportsResponse</returns>
        System.Threading.Tasks.Task<GetReportsResponse> GetReportsAsync (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of ApiResponse (GetReportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReportsResponse>> GetReportsAsyncWithHttpInfo (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportsApi : IReportsApi
    {
        private Amazon.SellingPartnerAPIAA.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(Amazon.SellingPartnerAPIAA.Client.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns></returns>
        public void CancelReport (string reportId)
        {
             CancelReportWithHttpInfo(reportId);
        }

        /// <summary>
        ///  Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelReportWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->CancelReport");

            var localVarPath = "/reports/2021-06-30/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelReportAsync (string reportId)
        {
             await CancelReportAsyncWithHttpInfo(reportId);

        }

        /// <summary>
        ///  Cancels the report that you specify. Only reports with processingStatus&#x3D;IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelReportAsyncWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->CancelReport");

            var localVarPath = "/reports/2021-06-30/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns></returns>
        public void CancelReportSchedule (string reportScheduleId)
        {
             CancelReportScheduleWithHttpInfo(reportScheduleId);
        }

        /// <summary>
        ///  Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelReportScheduleWithHttpInfo (string reportScheduleId)
        {
            // verify the required parameter 'reportScheduleId' is set
            if (reportScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'reportScheduleId' when calling ReportsApi->CancelReportSchedule");

            var localVarPath = "/reports/2021-06-30/schedules/{reportScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportScheduleId != null) localVarPathParams.Add("reportScheduleId", this.Configuration.ApiClient.ParameterToString(reportScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelReportSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelReportScheduleAsync (string reportScheduleId)
        {
             await CancelReportScheduleAsyncWithHttpInfo(reportScheduleId);

        }

        /// <summary>
        ///  Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelReportScheduleAsyncWithHttpInfo (string reportScheduleId)
        {
            // verify the required parameter 'reportScheduleId' is set
            if (reportScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'reportScheduleId' when calling ReportsApi->CancelReportSchedule");

            var localVarPath = "/reports/2021-06-30/schedules/{reportScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportScheduleId != null) localVarPathParams.Add("reportScheduleId", this.Configuration.ApiClient.ParameterToString(reportScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelReportSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateReportResponse</returns>
        public CreateReportResponse CreateReport (CreateReportSpecification body)
        {
             ApiResponse<CreateReportResponse> localVarResponse = CreateReportWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateReportResponse</returns>
        public ApiResponse< CreateReportResponse > CreateReportWithHttpInfo (CreateReportSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReportsApi->CreateReport");

            var localVarPath = "/reports/2021-06-30/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReportResponse)));
        }

        /// <summary>
        ///  Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateReportResponse</returns>
        public async System.Threading.Tasks.Task<CreateReportResponse> CreateReportAsync (CreateReportSpecification body)
        {
             ApiResponse<CreateReportResponse> localVarResponse = await CreateReportAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateReportResponse>> CreateReportAsyncWithHttpInfo (CreateReportSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReportsApi->CreateReport");

            var localVarPath = "/reports/2021-06-30/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReportResponse)));
        }

        /// <summary>
        ///  Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CreateReportScheduleResponse</returns>
        public CreateReportScheduleResponse CreateReportSchedule (CreateReportScheduleSpecification body)
        {
             ApiResponse<CreateReportScheduleResponse> localVarResponse = CreateReportScheduleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreateReportScheduleResponse</returns>
        public ApiResponse< CreateReportScheduleResponse > CreateReportScheduleWithHttpInfo (CreateReportScheduleSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReportsApi->CreateReportSchedule");

            var localVarPath = "/reports/2021-06-30/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReportSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReportScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateReportScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReportScheduleResponse)));
        }

        /// <summary>
        ///  Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CreateReportScheduleResponse</returns>
        public async System.Threading.Tasks.Task<CreateReportScheduleResponse> CreateReportScheduleAsync (CreateReportScheduleSpecification body)
        {
             ApiResponse<CreateReportScheduleResponse> localVarResponse = await CreateReportScheduleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreateReportScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateReportScheduleResponse>> CreateReportScheduleAsyncWithHttpInfo (CreateReportScheduleSpecification body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReportsApi->CreateReportSchedule");

            var localVarPath = "/reports/2021-06-30/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReportSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReportScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateReportScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReportScheduleResponse)));
        }

        /// <summary>
        ///  Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Report</returns>
        public Report GetReport (string reportId)
        {
             ApiResponse<Report> localVarResponse = GetReportWithHttpInfo(reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of Report</returns>
        public ApiResponse< Report > GetReportWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->GetReport");

            var localVarPath = "/reports/2021-06-30/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Report>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Report) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Report)));
        }

        /// <summary>
        ///  Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of Report</returns>
        public async System.Threading.Tasks.Task<Report> GetReportAsync (string reportId)
        {
             ApiResponse<Report> localVarResponse = await GetReportAsyncWithHttpInfo(reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2.0 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (Report)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Report>> GetReportAsyncWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->GetReport");

            var localVarPath = "/reports/2021-06-30/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", this.Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Report>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Report) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Report)));
        }

        /// <summary>
        ///  Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>ReportDocument</returns>
        public ReportDocument GetReportDocument (string reportDocumentId)
        {
             ApiResponse<ReportDocument> localVarResponse = GetReportDocumentWithHttpInfo(reportDocumentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>ApiResponse of ReportDocument</returns>
        public ApiResponse< ReportDocument > GetReportDocumentWithHttpInfo (string reportDocumentId)
        {
            // verify the required parameter 'reportDocumentId' is set
            if (reportDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'reportDocumentId' when calling ReportsApi->GetReportDocument");

            var localVarPath = "/reports/2021-06-30/documents/{reportDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportDocumentId != null) localVarPathParams.Add("reportDocumentId", this.Configuration.ApiClient.ParameterToString(reportDocumentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDocument)));
        }

        /// <summary>
        ///  Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>Task of ReportDocument</returns>
        public async System.Threading.Tasks.Task<ReportDocument> GetReportDocumentAsync (string reportDocumentId)
        {
             ApiResponse<ReportDocument> localVarResponse = await GetReportDocumentAsyncWithHttpInfo(reportDocumentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the information required for retrieving a report document&#39;s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0167 | 15 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api)in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportDocumentId">The identifier for the report document.</param>
        /// <returns>Task of ApiResponse (ReportDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportDocument>> GetReportDocumentAsyncWithHttpInfo (string reportDocumentId)
        {
            // verify the required parameter 'reportDocumentId' is set
            if (reportDocumentId == null)
                throw new ApiException(400, "Missing required parameter 'reportDocumentId' when calling ReportsApi->GetReportDocument");

            var localVarPath = "/reports/2021-06-30/documents/{reportDocumentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportDocumentId != null) localVarPathParams.Add("reportDocumentId", this.Configuration.ApiClient.ParameterToString(reportDocumentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDocument)));
        }

        /// <summary>
        ///  Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ReportSchedule</returns>
        public ReportSchedule GetReportSchedule (string reportScheduleId)
        {
             ApiResponse<ReportSchedule> localVarResponse = GetReportScheduleWithHttpInfo(reportScheduleId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>ApiResponse of ReportSchedule</returns>
        public ApiResponse< ReportSchedule > GetReportScheduleWithHttpInfo (string reportScheduleId)
        {
            // verify the required parameter 'reportScheduleId' is set
            if (reportScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'reportScheduleId' when calling ReportsApi->GetReportSchedule");

            var localVarPath = "/reports/2021-06-30/schedules/{reportScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportScheduleId != null) localVarPathParams.Add("reportScheduleId", this.Configuration.ApiClient.ParameterToString(reportScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportSchedule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportSchedule)));
        }

        /// <summary>
        ///  Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ReportSchedule</returns>
        public async System.Threading.Tasks.Task<ReportSchedule> GetReportScheduleAsync (string reportScheduleId)
        {
             ApiResponse<ReportSchedule> localVarResponse = await GetReportScheduleAsyncWithHttpInfo(reportScheduleId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportScheduleId">The identifier for the report schedule. This identifier is unique only in combination with a seller ID.</param>
        /// <returns>Task of ApiResponse (ReportSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportSchedule>> GetReportScheduleAsyncWithHttpInfo (string reportScheduleId)
        {
            // verify the required parameter 'reportScheduleId' is set
            if (reportScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'reportScheduleId' when calling ReportsApi->GetReportSchedule");

            var localVarPath = "/reports/2021-06-30/schedules/{reportScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportScheduleId != null) localVarPathParams.Add("reportScheduleId", this.Configuration.ApiClient.ParameterToString(reportScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportSchedule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportSchedule)));
        }

        /// <summary>
        ///  Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>ReportScheduleList</returns>
        public ReportScheduleList GetReportSchedules (List<string> reportTypes)
        {
             ApiResponse<ReportScheduleList> localVarResponse = GetReportSchedulesWithHttpInfo(reportTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>ApiResponse of ReportScheduleList</returns>
        public ApiResponse< ReportScheduleList > GetReportSchedulesWithHttpInfo (List<string> reportTypes)
        {
            // verify the required parameter 'reportTypes' is set
            if (reportTypes == null)
                throw new ApiException(400, "Missing required parameter 'reportTypes' when calling ReportsApi->GetReportSchedules");

            var localVarPath = "/reports/2021-06-30/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "reportTypes", reportTypes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportScheduleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportScheduleList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportScheduleList)));
        }

        /// <summary>
        ///  Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>Task of ReportScheduleList</returns>
        public async System.Threading.Tasks.Task<ReportScheduleList> GetReportSchedulesAsync (List<string> reportTypes)
        {
             ApiResponse<ReportScheduleList> localVarResponse = await GetReportSchedulesAsyncWithHttpInfo(reportTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter report schedules.</param>
        /// <returns>Task of ApiResponse (ReportScheduleList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportScheduleList>> GetReportSchedulesAsyncWithHttpInfo (List<string> reportTypes)
        {
            // verify the required parameter 'reportTypes' is set
            if (reportTypes == null)
                throw new ApiException(400, "Missing required parameter 'reportTypes' when calling ReportsApi->GetReportSchedules");

            var localVarPath = "/reports/2021-06-30/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "reportTypes", reportTypes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportScheduleList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportScheduleList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportScheduleList)));
        }

        /// <summary>
        ///  Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>GetReportsResponse</returns>
        public GetReportsResponse GetReports (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {
             ApiResponse<GetReportsResponse> localVarResponse = GetReportsWithHttpInfo(reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>ApiResponse of GetReportsResponse</returns>
        public ApiResponse< GetReportsResponse > GetReportsWithHttpInfo (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {

            var localVarPath = "/reports/2021-06-30/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "reportTypes", reportTypes)); // query parameter
            if (processingStatuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "processingStatuses", processingStatuses)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter
            if (createdUntil != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdUntil", createdUntil)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetReportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReportsResponse)));
        }

        /// <summary>
        ///  Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of GetReportsResponse</returns>
        public async System.Threading.Tasks.Task<GetReportsResponse> GetReportsAsync (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {
             ApiResponse<GetReportsResponse> localVarResponse = await GetReportsAsyncWithHttpInfo(reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportTypes">A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)</param>
        /// <param name="processingStatuses">A list of processing statuses used to filter reports. (optional)</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)</param>
        /// <param name="pageSize">The maximum number of reports to return in a single call. (optional, default to 10)</param>
        /// <param name="createdSince">The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)</param>
        /// <param name="createdUntil">The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)</param>
        /// <returns>Task of ApiResponse (GetReportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReportsResponse>> GetReportsAsyncWithHttpInfo (List<string> reportTypes = null, List<string> processingStatuses = null, List<string> marketplaceIds = null, int? pageSize = null, DateTime? createdSince = null, DateTime? createdUntil = null, string nextToken = null)
        {

            var localVarPath = "/reports/2021-06-30/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "reportTypes", reportTypes)); // query parameter
            if (processingStatuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "processingStatuses", processingStatuses)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter
            if (createdUntil != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdUntil", createdUntil)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetReportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReportsResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private AWSAuthenticationCredentials awsAuthenticationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }

            public Builder SetAWSAuthenticationCredentials(AWSAuthenticationCredentials awsAuthenticationCredentials)
            {
                this.awsAuthenticationCredentials = awsAuthenticationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ReportsApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                if (awsAuthenticationCredentials == null)
                {
                    throw new NullReferenceException("AWSAuthenticationCredentials not set");
                }
                
                Amazon.SellingPartnerAPIAA.Client.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Client.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    AuthenticationCredentials = awsAuthenticationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new ReportsApi(configuration);
            }
        }
    }
}
