/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Amazon.SellingPartnerAPIAA.Client.Client;
using Amazon.SellingPartnerAPIAA.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Amazon.SellingPartnerAPIAA.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductPricingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        GetPricingResponse GetCompetitivePricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        ApiResponse<GetPricingResponse> GetCompetitivePricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>GetOffersResponse</returns>
        GetOffersResponse GetItemOffers(string marketplaceId, string itemCondition, string asin, string customerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        ApiResponse<GetOffersResponse> GetItemOffersWithHttpInfo(string marketplaceId, string itemCondition, string asin, string customerType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>GetItemOffersBatchResponse</returns>
        GetItemOffersBatchResponse GetItemOffersBatch(GetItemOffersBatchRequest getItemOffersBatchRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>ApiResponse of GetItemOffersBatchResponse</returns>
        ApiResponse<GetItemOffersBatchResponse> GetItemOffersBatchWithHttpInfo(GetItemOffersBatchRequest getItemOffersBatchRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>GetOffersResponse</returns>
        GetOffersResponse GetListingOffers(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        ApiResponse<GetOffersResponse> GetListingOffersWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>GetListingOffersBatchResponse</returns>
        GetListingOffersBatchResponse GetListingOffersBatch(GetListingOffersBatchRequest getListingOffersBatchRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>ApiResponse of GetListingOffersBatchResponse</returns>
        ApiResponse<GetListingOffersBatchResponse> GetListingOffersBatchWithHttpInfo(GetListingOffersBatchRequest getListingOffersBatchRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        GetPricingResponse GetPricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        ApiResponse<GetPricingResponse> GetPricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        System.Threading.Tasks.Task<GetPricingResponse> GetCompetitivePricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetCompetitivePricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of GetOffersResponse</returns>
        System.Threading.Tasks.Task<GetOffersResponse> GetItemOffersAsync(string marketplaceId, string itemCondition, string asin, string customerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetItemOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string asin, string customerType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>Task of GetItemOffersBatchResponse</returns>
        System.Threading.Tasks.Task<GetItemOffersBatchResponse> GetItemOffersBatchAsync(GetItemOffersBatchRequest getItemOffersBatchRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>Task of ApiResponse (GetItemOffersBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetItemOffersBatchResponse>> GetItemOffersBatchAsyncWithHttpInfo(GetItemOffersBatchRequest getItemOffersBatchRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of GetOffersResponse</returns>
        System.Threading.Tasks.Task<GetOffersResponse> GetListingOffersAsync(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetListingOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>Task of GetListingOffersBatchResponse</returns>
        System.Threading.Tasks.Task<GetListingOffersBatchResponse> GetListingOffersBatchAsync(GetListingOffersBatchRequest getListingOffersBatchRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>Task of ApiResponse (GetListingOffersBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListingOffersBatchResponse>> GetListingOffersBatchAsyncWithHttpInfo(GetListingOffersBatchRequest getListingOffersBatchRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        System.Threading.Tasks.Task<GetPricingResponse> GetPricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetPricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductPricingApi : IProductPricingApi
    {
        private Amazon.SellingPartnerAPIAA.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPricingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductPricingApi(Amazon.SellingPartnerAPIAA.Client.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Client.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        public GetPricingResponse GetCompetitivePricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = GetCompetitivePricingWithHttpInfo(marketplaceId, itemType, asins, skus, customerType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        public ApiResponse<GetPricingResponse> GetCompetitivePricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetCompetitivePricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetCompetitivePricing");

            var localVarPath = "/products/pricing/v0/competitivePrice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter
            if (customerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CustomerType", customerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompetitivePricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        public async System.Threading.Tasks.Task<GetPricingResponse> GetCompetitivePricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = await GetCompetitivePricingAsyncWithHttpInfo(marketplaceId, itemType, asins, skus, customerType);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="customerType">Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetCompetitivePricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string customerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetCompetitivePricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetCompetitivePricing");

            var localVarPath = "/products/pricing/v0/competitivePrice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter
            if (customerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CustomerType", customerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompetitivePricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>GetOffersResponse</returns>
        public GetOffersResponse GetItemOffers(string marketplaceId, string itemCondition, string asin, string customerType = null)
        {
            ApiResponse<GetOffersResponse> localVarResponse = GetItemOffersWithHttpInfo(marketplaceId, itemCondition, asin, customerType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        public ApiResponse<GetOffersResponse> GetItemOffersWithHttpInfo(string marketplaceId, string itemCondition, string asin, string customerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ProductPricingApi->GetItemOffers");

            var localVarPath = "/products/pricing/v0/items/{Asin}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("Asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter
            if (customerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CustomerType", customerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of GetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetOffersResponse> GetItemOffersAsync(string marketplaceId, string itemCondition, string asin, string customerType = null)
        {
            ApiResponse<GetOffersResponse> localVarResponse = await GetItemOffersAsyncWithHttpInfo(marketplaceId, itemCondition, asin, customerType);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetItemOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string asin, string customerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetItemOffers");
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling ProductPricingApi->GetItemOffers");

            var localVarPath = "/products/pricing/v0/items/{Asin}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("Asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter
            if (customerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CustomerType", customerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>GetItemOffersBatchResponse</returns>
        public GetItemOffersBatchResponse GetItemOffersBatch(GetItemOffersBatchRequest getItemOffersBatchRequestBody)
        {
            ApiResponse<GetItemOffersBatchResponse> localVarResponse = GetItemOffersBatchWithHttpInfo(getItemOffersBatchRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>ApiResponse of GetItemOffersBatchResponse</returns>
        public ApiResponse<GetItemOffersBatchResponse> GetItemOffersBatchWithHttpInfo(GetItemOffersBatchRequest getItemOffersBatchRequestBody)
        {
            // verify the required parameter 'getItemOffersBatchRequestBody' is set
            if (getItemOffersBatchRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'getItemOffersBatchRequestBody' when calling ProductPricingApi->GetItemOffersBatch");

            var localVarPath = "/batches/products/pricing/v0/itemOffers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getItemOffersBatchRequestBody != null && getItemOffersBatchRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getItemOffersBatchRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getItemOffersBatchRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemOffersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetItemOffersBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetItemOffersBatchResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetItemOffersBatchResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>Task of GetItemOffersBatchResponse</returns>
        public async System.Threading.Tasks.Task<GetItemOffersBatchResponse> GetItemOffersBatchAsync(GetItemOffersBatchRequest getItemOffersBatchRequestBody)
        {
            ApiResponse<GetItemOffersBatchResponse> localVarResponse = await GetItemOffersBatchAsyncWithHttpInfo(getItemOffersBatchRequestBody);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getItemOffersBatchRequestBody"></param>
        /// <returns>Task of ApiResponse (GetItemOffersBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetItemOffersBatchResponse>> GetItemOffersBatchAsyncWithHttpInfo(GetItemOffersBatchRequest getItemOffersBatchRequestBody)
        {
            // verify the required parameter 'getItemOffersBatchRequestBody' is set
            if (getItemOffersBatchRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'getItemOffersBatchRequestBody' when calling ProductPricingApi->GetItemOffersBatch");

            var localVarPath = "/batches/products/pricing/v0/itemOffers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getItemOffersBatchRequestBody != null && getItemOffersBatchRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getItemOffersBatchRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getItemOffersBatchRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemOffersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetItemOffersBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetItemOffersBatchResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetItemOffersBatchResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>GetOffersResponse</returns>
        public GetOffersResponse GetListingOffers(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null)
        {
            ApiResponse<GetOffersResponse> localVarResponse = GetListingOffersWithHttpInfo(marketplaceId, itemCondition, sellerSKU, customerType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>ApiResponse of GetOffersResponse</returns>
        public ApiResponse<GetOffersResponse> GetListingOffersWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'sellerSKU' is set
            if (sellerSKU == null)
                throw new ApiException(400, "Missing required parameter 'sellerSKU' when calling ProductPricingApi->GetListingOffers");

            var localVarPath = "/products/pricing/v0/listings/{SellerSKU}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSKU != null) localVarPathParams.Add("SellerSKU", this.Configuration.ApiClient.ParameterToString(sellerSKU)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter
            if (customerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CustomerType", customerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of GetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetOffersResponse> GetListingOffersAsync(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null)
        {
            ApiResponse<GetOffersResponse> localVarResponse = await GetListingOffersAsyncWithHttpInfo(marketplaceId, itemCondition, sellerSKU, customerType);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.</param>
        /// <param name="sellerSKU">Identifies an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit.</param>
        /// <param name="customerType">Indicates whether to request Consumer or Business offers. Default is Consumer. (optional)</param>
        /// <returns>Task of ApiResponse (GetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOffersResponse>> GetListingOffersAsyncWithHttpInfo(string marketplaceId, string itemCondition, string sellerSKU, string customerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'itemCondition' is set
            if (itemCondition == null)
                throw new ApiException(400, "Missing required parameter 'itemCondition' when calling ProductPricingApi->GetListingOffers");
            // verify the required parameter 'sellerSKU' is set
            if (sellerSKU == null)
                throw new ApiException(400, "Missing required parameter 'sellerSKU' when calling ProductPricingApi->GetListingOffers");

            var localVarPath = "/products/pricing/v0/listings/{SellerSKU}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sellerSKU != null) localVarPathParams.Add("SellerSKU", this.Configuration.ApiClient.ParameterToString(sellerSKU)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter
            if (customerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CustomerType", customerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOffersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOffersResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOffersResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>GetListingOffersBatchResponse</returns>
        public GetListingOffersBatchResponse GetListingOffersBatch(GetListingOffersBatchRequest getListingOffersBatchRequestBody)
        {
            ApiResponse<GetListingOffersBatchResponse> localVarResponse = GetListingOffersBatchWithHttpInfo(getListingOffersBatchRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>ApiResponse of GetListingOffersBatchResponse</returns>
        public ApiResponse<GetListingOffersBatchResponse> GetListingOffersBatchWithHttpInfo(GetListingOffersBatchRequest getListingOffersBatchRequestBody)
        {
            // verify the required parameter 'getListingOffersBatchRequestBody' is set
            if (getListingOffersBatchRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'getListingOffersBatchRequestBody' when calling ProductPricingApi->GetListingOffersBatch");

            var localVarPath = "/batches/products/pricing/v0/listingOffers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getListingOffersBatchRequestBody != null && getListingOffersBatchRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getListingOffersBatchRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getListingOffersBatchRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingOffersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListingOffersBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListingOffersBatchResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListingOffersBatchResponse)));
        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>Task of GetListingOffersBatchResponse</returns>
        public async System.Threading.Tasks.Task<GetListingOffersBatchResponse> GetListingOffersBatchAsync(GetListingOffersBatchRequest getListingOffersBatchRequestBody)
        {
            ApiResponse<GetListingOffersBatchResponse> localVarResponse = await GetListingOffersBatchAsyncWithHttpInfo(getListingOffersBatchRequestBody);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListingOffersBatchRequestBody"></param>
        /// <returns>Task of ApiResponse (GetListingOffersBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListingOffersBatchResponse>> GetListingOffersBatchAsyncWithHttpInfo(GetListingOffersBatchRequest getListingOffersBatchRequestBody)
        {
            // verify the required parameter 'getListingOffersBatchRequestBody' is set
            if (getListingOffersBatchRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'getListingOffersBatchRequestBody' when calling ProductPricingApi->GetListingOffersBatch");

            var localVarPath = "/batches/products/pricing/v0/listingOffers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getListingOffersBatchRequestBody != null && getListingOffersBatchRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getListingOffersBatchRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getListingOffersBatchRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListingOffersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListingOffersBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListingOffersBatchResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListingOffersBatchResponse)));
        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>GetPricingResponse</returns>
        public GetPricingResponse GetPricing(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = GetPricingWithHttpInfo(marketplaceId, itemType, asins, skus, itemCondition, offerType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>ApiResponse of GetPricingResponse</returns>
        public ApiResponse<GetPricingResponse> GetPricingWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetPricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetPricing");

            var localVarPath = "/products/pricing/v0/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter
            if (offerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfferType", offerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>Task of GetPricingResponse</returns>
        public async System.Threading.Tasks.Task<GetPricingResponse> GetPricingAsync(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null)
        {
            ApiResponse<GetPricingResponse> localVarResponse = await GetPricingAsyncWithHttpInfo(marketplaceId, itemType, asins, skus, itemCondition, offerType);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 0.5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace for which prices are returned.</param>
        /// <param name="itemType">Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.</param>
        /// <param name="asins">A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace. (optional)</param>
        /// <param name="skus">A list of up to twenty seller SKU values used to identify items in the given marketplace. (optional)</param>
        /// <param name="itemCondition">Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club. (optional)</param>
        /// <param name="offerType">Indicates whether to request pricing information for the seller&#39;s B2C or B2B offers. Default is B2C. (optional)</param>
        /// <returns>Task of ApiResponse (GetPricingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPricingResponse>> GetPricingAsyncWithHttpInfo(string marketplaceId, string itemType, List<string> asins = null, List<string> skus = null, string itemCondition = null, string offerType = null)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling ProductPricingApi->GetPricing");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling ProductPricingApi->GetPricing");

            var localVarPath = "/products/pricing/v0/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter
            if (asins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Asins", asins)); // query parameter
            if (skus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "Skus", skus)); // query parameter
            if (itemType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemType", itemType)); // query parameter
            if (itemCondition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ItemCondition", itemCondition)); // query parameter
            if (offerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfferType", offerType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPricingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPricingResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPricingResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private AWSAuthenticationCredentials awsAuthenticationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }

            public Builder SetAWSAuthenticationCredentials(AWSAuthenticationCredentials awsAuthenticationCredentials)
            {
                this.awsAuthenticationCredentials = awsAuthenticationCredentials;
                return this;
            }


            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public ProductPricingApi Build()
            {
                if (lwaAuthorizationCredentials == null)
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                if (awsAuthenticationCredentials == null)
                {
                    throw new NullReferenceException("AWSAuthenticationCredentials not set");
                }

                Amazon.SellingPartnerAPIAA.Client.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Client.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    AuthenticationCredentials = awsAuthenticationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new ProductPricingApi(configuration);
            }
        }
    }
}
