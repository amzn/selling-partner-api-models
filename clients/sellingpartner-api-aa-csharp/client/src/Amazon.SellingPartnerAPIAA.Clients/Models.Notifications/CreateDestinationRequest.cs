/* 
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, see the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Notifications
{
    /// <summary>
    /// The request schema for the createDestination operation.
    /// </summary>
    [DataContract]
    public partial class CreateDestinationRequest :  IEquatable<CreateDestinationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDestinationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDestinationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDestinationRequest" /> class.
        /// </summary>
        /// <param name="resourceSpecification">The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination. (required).</param>
        /// <param name="name">A developer-defined name to help identify this destination. (required).</param>
        public CreateDestinationRequest(DestinationResourceSpecification resourceSpecification = default(DestinationResourceSpecification), string name = default(string))
        {
            // to ensure "resourceSpecification" is required (not null)
            if (resourceSpecification == null)
            {
                throw new InvalidDataException("resourceSpecification is a required property for CreateDestinationRequest and cannot be null");
            }
            else
            {
                this.ResourceSpecification = resourceSpecification;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateDestinationRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }
        }
        
        /// <summary>
        /// The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.
        /// </summary>
        /// <value>The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.</value>
        [DataMember(Name="resourceSpecification", EmitDefaultValue=false)]
        public DestinationResourceSpecification ResourceSpecification { get; set; }

        /// <summary>
        /// A developer-defined name to help identify this destination.
        /// </summary>
        /// <value>A developer-defined name to help identify this destination.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDestinationRequest {\n");
            sb.Append("  ResourceSpecification: ").Append(ResourceSpecification).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDestinationRequest);
        }

        /// <summary>
        /// Returns true if CreateDestinationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDestinationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDestinationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceSpecification == input.ResourceSpecification ||
                    (this.ResourceSpecification != null &&
                    this.ResourceSpecification.Equals(input.ResourceSpecification))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceSpecification != null)
                    hashCode = hashCode * 59 + this.ResourceSpecification.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
