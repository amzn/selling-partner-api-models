/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Feeds
{
    /// <summary>
    /// Information required to create the feed.
    /// </summary>
    [DataContract]
    public partial class CreateFeedSpecification :  IEquatable<CreateFeedSpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFeedSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedSpecification" /> class.
        /// </summary>
        /// <param name="feedType">The feed type. (required).</param>
        /// <param name="marketplaceIds">A list of identifiers for marketplaces that you want the feed to be applied to. (required).</param>
        /// <param name="inputFeedDocumentId">The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation. (required).</param>
        /// <param name="feedOptions">feedOptions.</param>
        public CreateFeedSpecification(string feedType = default(string), List<string> marketplaceIds = default(List<string>), string inputFeedDocumentId = default(string), FeedOptions feedOptions = default(FeedOptions))
        {
            // to ensure "feedType" is required (not null)
            if (feedType == null)
            {
                throw new InvalidDataException("feedType is a required property for CreateFeedSpecification and cannot be null");
            }
            else
            {
                this.FeedType = feedType;
            }
            // to ensure "marketplaceIds" is required (not null)
            if (marketplaceIds == null)
            {
                throw new InvalidDataException("marketplaceIds is a required property for CreateFeedSpecification and cannot be null");
            }
            else
            {
                this.MarketplaceIds = marketplaceIds;
            }
            // to ensure "inputFeedDocumentId" is required (not null)
            if (inputFeedDocumentId == null)
            {
                throw new InvalidDataException("inputFeedDocumentId is a required property for CreateFeedSpecification and cannot be null");
            }
            else
            {
                this.InputFeedDocumentId = inputFeedDocumentId;
            }
            this.FeedOptions = feedOptions;
        }
        
        /// <summary>
        /// The feed type.
        /// </summary>
        /// <value>The feed type.</value>
        [DataMember(Name="feedType", EmitDefaultValue=false)]
        public string FeedType { get; set; }

        /// <summary>
        /// A list of identifiers for marketplaces that you want the feed to be applied to.
        /// </summary>
        /// <value>A list of identifiers for marketplaces that you want the feed to be applied to.</value>
        [DataMember(Name="marketplaceIds", EmitDefaultValue=false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.
        /// </summary>
        /// <value>The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.</value>
        [DataMember(Name="inputFeedDocumentId", EmitDefaultValue=false)]
        public string InputFeedDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets FeedOptions
        /// </summary>
        [DataMember(Name="feedOptions", EmitDefaultValue=false)]
        public FeedOptions FeedOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFeedSpecification {\n");
            sb.Append("  FeedType: ").Append(FeedType).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  InputFeedDocumentId: ").Append(InputFeedDocumentId).Append("\n");
            sb.Append("  FeedOptions: ").Append(FeedOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFeedSpecification);
        }

        /// <summary>
        /// Returns true if CreateFeedSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFeedSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFeedSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeedType == input.FeedType ||
                    (this.FeedType != null &&
                    this.FeedType.Equals(input.FeedType))
                ) && 
                (
                    this.MarketplaceIds == input.MarketplaceIds ||
                    this.MarketplaceIds != null &&
                    this.MarketplaceIds.SequenceEqual(input.MarketplaceIds)
                ) && 
                (
                    this.InputFeedDocumentId == input.InputFeedDocumentId ||
                    (this.InputFeedDocumentId != null &&
                    this.InputFeedDocumentId.Equals(input.InputFeedDocumentId))
                ) && 
                (
                    this.FeedOptions == input.FeedOptions ||
                    (this.FeedOptions != null &&
                    this.FeedOptions.Equals(input.FeedOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedType != null)
                    hashCode = hashCode * 59 + this.FeedType.GetHashCode();
                if (this.MarketplaceIds != null)
                    hashCode = hashCode * 59 + this.MarketplaceIds.GetHashCode();
                if (this.InputFeedDocumentId != null)
                    hashCode = hashCode * 59 + this.InputFeedDocumentId.GetHashCode();
                if (this.FeedOptions != null)
                    hashCode = hashCode * 59 + this.FeedOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
