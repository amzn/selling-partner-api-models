/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Reports
{
    /// <summary>
    /// Detailed information about the report.
    /// </summary>
    [DataContract]
    public partial class Report :  IEquatable<Report>, IValidatableObject
    {
        /// <summary>
        /// The processing status of the report.
        /// </summary>
        /// <value>The processing status of the report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStatusEnum
        {
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1,
            
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2,
            
            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 3,
            
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4,
            
            /// <summary>
            /// Enum INQUEUE for value: IN_QUEUE
            /// </summary>
            [EnumMember(Value = "IN_QUEUE")]
            INQUEUE = 5
        }

        /// <summary>
        /// The processing status of the report.
        /// </summary>
        /// <value>The processing status of the report.</value>
        [DataMember(Name="processingStatus", EmitDefaultValue=false)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Report() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        /// <param name="marketplaceIds">A list of marketplace identifiers for the report..</param>
        /// <param name="reportId">The identifier for the report. This identifier is unique only in combination with a seller ID. (required).</param>
        /// <param name="reportType">The report type. (required).</param>
        /// <param name="dataStartTime">The start of a date and time range used for selecting the data to report..</param>
        /// <param name="dataEndTime">The end of a date and time range used for selecting the data to report..</param>
        /// <param name="reportScheduleId">The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID..</param>
        /// <param name="createdTime">The date and time when the report was created. (required).</param>
        /// <param name="processingStatus">The processing status of the report. (required).</param>
        /// <param name="processingStartTime">The date and time when the report processing started, in ISO 8601 date time format..</param>
        /// <param name="processingEndTime">The date and time when the report processing completed, in ISO 8601 date time format..</param>
        /// <param name="reportDocumentId">The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve the report document&#39;s contents..</param>
        public Report(List<string> marketplaceIds = default(List<string>), string reportId = default(string), string reportType = default(string), DateTime? dataStartTime = default(DateTime?), DateTime? dataEndTime = default(DateTime?), string reportScheduleId = default(string), DateTime? createdTime = default(DateTime?), ProcessingStatusEnum processingStatus = default(ProcessingStatusEnum), DateTime? processingStartTime = default(DateTime?), DateTime? processingEndTime = default(DateTime?), string reportDocumentId = default(string))
        {
            // to ensure "reportId" is required (not null)
            if (reportId == null)
            {
                throw new InvalidDataException("reportId is a required property for Report and cannot be null");
            }
            else
            {
                this.ReportId = reportId;
            }
            // to ensure "reportType" is required (not null)
            if (reportType == null)
            {
                throw new InvalidDataException("reportType is a required property for Report and cannot be null");
            }
            else
            {
                this.ReportType = reportType;
            }
            // to ensure "createdTime" is required (not null)
            if (createdTime == null)
            {
                throw new InvalidDataException("createdTime is a required property for Report and cannot be null");
            }
            else
            {
                this.CreatedTime = createdTime;
            }
            // to ensure "processingStatus" is required (not null)
            if (processingStatus == null)
            {
                throw new InvalidDataException("processingStatus is a required property for Report and cannot be null");
            }
            else
            {
                this.ProcessingStatus = processingStatus;
            }
            this.MarketplaceIds = marketplaceIds;
            this.DataStartTime = dataStartTime;
            this.DataEndTime = dataEndTime;
            this.ReportScheduleId = reportScheduleId;
            this.ProcessingStartTime = processingStartTime;
            this.ProcessingEndTime = processingEndTime;
            this.ReportDocumentId = reportDocumentId;
        }
        
        /// <summary>
        /// A list of marketplace identifiers for the report.
        /// </summary>
        /// <value>A list of marketplace identifiers for the report.</value>
        [DataMember(Name="marketplaceIds", EmitDefaultValue=false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The identifier for the report. This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier for the report. This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name="reportId", EmitDefaultValue=false)]
        public string ReportId { get; set; }

        /// <summary>
        /// The report type.
        /// </summary>
        /// <value>The report type.</value>
        [DataMember(Name="reportType", EmitDefaultValue=false)]
        public string ReportType { get; set; }

        /// <summary>
        /// The start of a date and time range used for selecting the data to report.
        /// </summary>
        /// <value>The start of a date and time range used for selecting the data to report.</value>
        [DataMember(Name="dataStartTime", EmitDefaultValue=false)]
        public DateTime? DataStartTime { get; set; }

        /// <summary>
        /// The end of a date and time range used for selecting the data to report.
        /// </summary>
        /// <value>The end of a date and time range used for selecting the data to report.</value>
        [DataMember(Name="dataEndTime", EmitDefaultValue=false)]
        public DateTime? DataEndTime { get; set; }

        /// <summary>
        /// The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
        /// </summary>
        /// <value>The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.</value>
        [DataMember(Name="reportScheduleId", EmitDefaultValue=false)]
        public string ReportScheduleId { get; set; }

        /// <summary>
        /// The date and time when the report was created.
        /// </summary>
        /// <value>The date and time when the report was created.</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public DateTime? CreatedTime { get; set; }


        /// <summary>
        /// The date and time when the report processing started, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the report processing started, in ISO 8601 date time format.</value>
        [DataMember(Name="processingStartTime", EmitDefaultValue=false)]
        public DateTime? ProcessingStartTime { get; set; }

        /// <summary>
        /// The date and time when the report processing completed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time when the report processing completed, in ISO 8601 date time format.</value>
        [DataMember(Name="processingEndTime", EmitDefaultValue=false)]
        public DateTime? ProcessingEndTime { get; set; }

        /// <summary>
        /// The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve the report document&#39;s contents.
        /// </summary>
        /// <value>The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve the report document&#39;s contents.</value>
        [DataMember(Name="reportDocumentId", EmitDefaultValue=false)]
        public string ReportDocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  DataStartTime: ").Append(DataStartTime).Append("\n");
            sb.Append("  DataEndTime: ").Append(DataEndTime).Append("\n");
            sb.Append("  ReportScheduleId: ").Append(ReportScheduleId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ProcessingStartTime: ").Append(ProcessingStartTime).Append("\n");
            sb.Append("  ProcessingEndTime: ").Append(ProcessingEndTime).Append("\n");
            sb.Append("  ReportDocumentId: ").Append(ReportDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Report);
        }

        /// <summary>
        /// Returns true if Report instances are equal
        /// </summary>
        /// <param name="input">Instance of Report to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Report input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceIds == input.MarketplaceIds ||
                    this.MarketplaceIds != null &&
                    this.MarketplaceIds.SequenceEqual(input.MarketplaceIds)
                ) && 
                (
                    this.ReportId == input.ReportId ||
                    (this.ReportId != null &&
                    this.ReportId.Equals(input.ReportId))
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) && 
                (
                    this.DataStartTime == input.DataStartTime ||
                    (this.DataStartTime != null &&
                    this.DataStartTime.Equals(input.DataStartTime))
                ) && 
                (
                    this.DataEndTime == input.DataEndTime ||
                    (this.DataEndTime != null &&
                    this.DataEndTime.Equals(input.DataEndTime))
                ) && 
                (
                    this.ReportScheduleId == input.ReportScheduleId ||
                    (this.ReportScheduleId != null &&
                    this.ReportScheduleId.Equals(input.ReportScheduleId))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.ProcessingStatus == input.ProcessingStatus ||
                    (this.ProcessingStatus != null &&
                    this.ProcessingStatus.Equals(input.ProcessingStatus))
                ) && 
                (
                    this.ProcessingStartTime == input.ProcessingStartTime ||
                    (this.ProcessingStartTime != null &&
                    this.ProcessingStartTime.Equals(input.ProcessingStartTime))
                ) && 
                (
                    this.ProcessingEndTime == input.ProcessingEndTime ||
                    (this.ProcessingEndTime != null &&
                    this.ProcessingEndTime.Equals(input.ProcessingEndTime))
                ) && 
                (
                    this.ReportDocumentId == input.ReportDocumentId ||
                    (this.ReportDocumentId != null &&
                    this.ReportDocumentId.Equals(input.ReportDocumentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceIds != null)
                    hashCode = hashCode * 59 + this.MarketplaceIds.GetHashCode();
                if (this.ReportId != null)
                    hashCode = hashCode * 59 + this.ReportId.GetHashCode();
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.DataStartTime != null)
                    hashCode = hashCode * 59 + this.DataStartTime.GetHashCode();
                if (this.DataEndTime != null)
                    hashCode = hashCode * 59 + this.DataEndTime.GetHashCode();
                if (this.ReportScheduleId != null)
                    hashCode = hashCode * 59 + this.ReportScheduleId.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.ProcessingStatus != null)
                    hashCode = hashCode * 59 + this.ProcessingStatus.GetHashCode();
                if (this.ProcessingStartTime != null)
                    hashCode = hashCode * 59 + this.ProcessingStartTime.GetHashCode();
                if (this.ProcessingEndTime != null)
                    hashCode = hashCode * 59 + this.ProcessingEndTime.GetHashCode();
                if (this.ReportDocumentId != null)
                    hashCode = hashCode * 59 + this.ReportDocumentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
