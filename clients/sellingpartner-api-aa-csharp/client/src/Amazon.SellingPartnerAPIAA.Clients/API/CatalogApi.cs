/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Amazon.SellingPartnerAPIAA.Clients.Client;
using Amazon.SellingPartnerAPIAA.Clients.Models.Catalog;
using Amazon.SellingPartnerAPIAA;

namespace Amazon.SellingPartnerAPIAA.Clients.API
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Item</returns>
        Item GetCatalogItem (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> GetCatalogItemWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>ItemSearchResults</returns>
        ItemSearchResults SearchCatalogItems (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>ApiResponse of ItemSearchResults</returns>
        ApiResponse<ItemSearchResults> SearchCatalogItemsWithHttpInfo (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> GetCatalogItemAsync (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> GetCatalogItemAsyncWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>Task of ItemSearchResults</returns>
        System.Threading.Tasks.Task<ItemSearchResults> SearchCatalogItemsAsync (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ItemSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSearchResults>> SearchCatalogItemsAsyncWithHttpInfo (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogApi : ICatalogApi
    {
        private Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogApi(Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = Amazon.SellingPartnerAPIAA.Clients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.SellingPartnerAPIAA.Clients.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.SellingPartnerAPIAA.Clients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Item</returns>
        public Item GetCatalogItem (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
             ApiResponse<Item> localVarResponse = GetCatalogItemWithHttpInfo(asin, marketplaceIds, includedData, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ApiResponse of Item</returns>
        public ApiResponse< Item > GetCatalogItemWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CatalogApi->GetCatalogItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->GetCatalogItem");

            var localVarPath = "/catalog/2022-04-01/items/{asin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatalogItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> GetCatalogItemAsync (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
             ApiResponse<Item> localVarResponse = await GetCatalogItemAsyncWithHttpInfo(asin, marketplaceIds, includedData, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Item>> GetCatalogItemAsyncWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CatalogApi->GetCatalogItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->GetCatalogItem");

            var localVarPath = "/catalog/2022-04-01/items/{asin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatalogItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>ItemSearchResults</returns>
        public ItemSearchResults SearchCatalogItems (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null)
        {
             ApiResponse<ItemSearchResults> localVarResponse = SearchCatalogItemsWithHttpInfo(marketplaceIds, identifiers, identifiersType, includedData, locale, sellerId, keywords, brandNames, classificationIds, pageSize, pageToken, keywordsLocale);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>ApiResponse of ItemSearchResults</returns>
        public ApiResponse< ItemSearchResults > SearchCatalogItemsWithHttpInfo (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null)
        {
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->SearchCatalogItems");

            var localVarPath = "/catalog/2022-04-01/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifiers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "identifiers", identifiers)); // query parameter
            if (identifiersType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifiersType", identifiersType)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter
            if (sellerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sellerId", sellerId)); // query parameter
            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keywords", keywords)); // query parameter
            if (brandNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "brandNames", brandNames)); // query parameter
            if (classificationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "classificationIds", classificationIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (keywordsLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordsLocale", keywordsLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCatalogItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSearchResults)));
        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>Task of ItemSearchResults</returns>
        public async System.Threading.Tasks.Task<ItemSearchResults> SearchCatalogItemsAsync (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null)
        {
             ApiResponse<ItemSearchResults> localVarResponse = await SearchCatalogItemsAsyncWithHttpInfo(marketplaceIds, identifiers, identifiersType, includedData, locale, sellerId, keywords, brandNames, classificationIds, pageSize, pageToken, keywordsLocale);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="Amazon.SellingPartnerAPIAA.Clients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="identifiers">A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;. (optional)</param>
        /// <param name="identifiersType">Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided. (optional)</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;. (optional, default to [&quot;summaries&quot;])</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="sellerId">A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;. (optional)</param>
        /// <param name="keywords">A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ItemSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSearchResults>> SearchCatalogItemsAsyncWithHttpInfo (List<string> marketplaceIds, List<string> identifiers = null, string identifiersType = null, List<string> includedData = null, string locale = null, string sellerId = null, List<string> keywords = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null)
        {
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->SearchCatalogItems");

            var localVarPath = "/catalog/2022-04-01/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifiers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "identifiers", identifiers)); // query parameter
            if (identifiersType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifiersType", identifiersType)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter
            if (sellerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sellerId", sellerId)); // query parameter
            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keywords", keywords)); // query parameter
            if (brandNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "brandNames", brandNames)); // query parameter
            if (classificationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "classificationIds", classificationIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (keywordsLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordsLocale", keywordsLocale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCatalogItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSearchResults)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private AWSAuthenticationCredentials awsAuthenticationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }

            public Builder SetAWSAuthenticationCredentials(AWSAuthenticationCredentials awsAuthenticationCredentials)
            {
                this.awsAuthenticationCredentials = awsAuthenticationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public CatalogApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                if (awsAuthenticationCredentials == null)
                {
                    throw new NullReferenceException("AWSAuthenticationCredentials not set");
                }
                
                Amazon.SellingPartnerAPIAA.Clients.Client.Configuration configuration = new Amazon.SellingPartnerAPIAA.Clients.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    AuthenticationCredentials = awsAuthenticationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new CatalogApi(configuration);
            }
        }
    }
}
