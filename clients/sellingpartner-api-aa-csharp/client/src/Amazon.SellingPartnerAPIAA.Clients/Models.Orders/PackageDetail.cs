/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Orders
{
    /// <summary>
    /// Properties of packages
    /// </summary>
    [DataContract]
    public partial class PackageDetail :  IEquatable<PackageDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageDetail" /> class.
        /// </summary>
        /// <param name="packageReferenceId">packageReferenceId (required).</param>
        /// <param name="carrierCode">Identifies the carrier that will deliver the package. This field is required for all marketplaces, see [reference](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces). (required).</param>
        /// <param name="carrierName">Carrier Name that will deliver the package. Required when carrierCode is \&quot;Others\&quot; .</param>
        /// <param name="shippingMethod">Ship method to be used for shipping the order..</param>
        /// <param name="trackingNumber">The tracking number used to obtain tracking and delivery information. (required).</param>
        /// <param name="shipDate">The shipping date for the package. Must be in ISO-8601 date/time format. (required).</param>
        /// <param name="shipFromSupplySourceId">The unique identifier of the supply source..</param>
        /// <param name="orderItems">The list of order items and quantities to be updated. (required).</param>
        public PackageDetail(string packageReferenceId = default(string), string carrierCode = default(string), string carrierName = default(string), string shippingMethod = default(string), string trackingNumber = default(string), DateTime? shipDate = default(DateTime?), string shipFromSupplySourceId = default(string), ConfirmShipmentOrderItemsList orderItems = default(ConfirmShipmentOrderItemsList))
        {
            // to ensure "packageReferenceId" is required (not null)
            if (packageReferenceId == null)
            {
                throw new InvalidDataException("packageReferenceId is a required property for PackageDetail and cannot be null");
            }
            else
            {
                this.PackageReferenceId = packageReferenceId;
            }
            // to ensure "carrierCode" is required (not null)
            if (carrierCode == null)
            {
                throw new InvalidDataException("carrierCode is a required property for PackageDetail and cannot be null");
            }
            else
            {
                this.CarrierCode = carrierCode;
            }
            // to ensure "trackingNumber" is required (not null)
            if (trackingNumber == null)
            {
                throw new InvalidDataException("trackingNumber is a required property for PackageDetail and cannot be null");
            }
            else
            {
                this.TrackingNumber = trackingNumber;
            }
            // to ensure "shipDate" is required (not null)
            if (shipDate == null)
            {
                throw new InvalidDataException("shipDate is a required property for PackageDetail and cannot be null");
            }
            else
            {
                this.ShipDate = shipDate;
            }
            // to ensure "orderItems" is required (not null)
            if (orderItems == null)
            {
                throw new InvalidDataException("orderItems is a required property for PackageDetail and cannot be null");
            }
            else
            {
                this.OrderItems = orderItems;
            }
            this.CarrierName = carrierName;
            this.ShippingMethod = shippingMethod;
            this.ShipFromSupplySourceId = shipFromSupplySourceId;
        }
        
        /// <summary>
        /// Gets or Sets PackageReferenceId
        /// </summary>
        [DataMember(Name="packageReferenceId", EmitDefaultValue=false)]
        public string PackageReferenceId { get; set; }

        /// <summary>
        /// Identifies the carrier that will deliver the package. This field is required for all marketplaces, see [reference](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces).
        /// </summary>
        /// <value>Identifies the carrier that will deliver the package. This field is required for all marketplaces, see [reference](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces).</value>
        [DataMember(Name="carrierCode", EmitDefaultValue=false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Carrier Name that will deliver the package. Required when carrierCode is \&quot;Others\&quot; 
        /// </summary>
        /// <value>Carrier Name that will deliver the package. Required when carrierCode is \&quot;Others\&quot; </value>
        [DataMember(Name="carrierName", EmitDefaultValue=false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Ship method to be used for shipping the order.
        /// </summary>
        /// <value>Ship method to be used for shipping the order.</value>
        [DataMember(Name="shippingMethod", EmitDefaultValue=false)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// The tracking number used to obtain tracking and delivery information.
        /// </summary>
        /// <value>The tracking number used to obtain tracking and delivery information.</value>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The shipping date for the package. Must be in ISO-8601 date/time format.
        /// </summary>
        /// <value>The shipping date for the package. Must be in ISO-8601 date/time format.</value>
        [DataMember(Name="shipDate", EmitDefaultValue=false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        /// The unique identifier of the supply source.
        /// </summary>
        /// <value>The unique identifier of the supply source.</value>
        [DataMember(Name="shipFromSupplySourceId", EmitDefaultValue=false)]
        public string ShipFromSupplySourceId { get; set; }

        /// <summary>
        /// The list of order items and quantities to be updated.
        /// </summary>
        /// <value>The list of order items and quantities to be updated.</value>
        [DataMember(Name="orderItems", EmitDefaultValue=false)]
        public ConfirmShipmentOrderItemsList OrderItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageDetail {\n");
            sb.Append("  PackageReferenceId: ").Append(PackageReferenceId).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  ShipFromSupplySourceId: ").Append(ShipFromSupplySourceId).Append("\n");
            sb.Append("  OrderItems: ").Append(OrderItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageDetail);
        }

        /// <summary>
        /// Returns true if PackageDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PackageReferenceId == input.PackageReferenceId ||
                    (this.PackageReferenceId != null &&
                    this.PackageReferenceId.Equals(input.PackageReferenceId))
                ) && 
                (
                    this.CarrierCode == input.CarrierCode ||
                    (this.CarrierCode != null &&
                    this.CarrierCode.Equals(input.CarrierCode))
                ) && 
                (
                    this.CarrierName == input.CarrierName ||
                    (this.CarrierName != null &&
                    this.CarrierName.Equals(input.CarrierName))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.ShipFromSupplySourceId == input.ShipFromSupplySourceId ||
                    (this.ShipFromSupplySourceId != null &&
                    this.ShipFromSupplySourceId.Equals(input.ShipFromSupplySourceId))
                ) && 
                (
                    this.OrderItems == input.OrderItems ||
                    (this.OrderItems != null &&
                    this.OrderItems.Equals(input.OrderItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageReferenceId != null)
                    hashCode = hashCode * 59 + this.PackageReferenceId.GetHashCode();
                if (this.CarrierCode != null)
                    hashCode = hashCode * 59 + this.CarrierCode.GetHashCode();
                if (this.CarrierName != null)
                    hashCode = hashCode * 59 + this.CarrierName.GetHashCode();
                if (this.ShippingMethod != null)
                    hashCode = hashCode * 59 + this.ShippingMethod.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.ShipFromSupplySourceId != null)
                    hashCode = hashCode * 59 + this.ShipFromSupplySourceId.GetHashCode();
                if (this.OrderItems != null)
                    hashCode = hashCode * 59 + this.OrderItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
