/* 
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductTypes
{
    /// <summary>
    /// A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.
    /// </summary>
    [DataContract]
    public partial class ProductTypeDefinition :  IEquatable<ProductTypeDefinition>, IValidatableObject
    {
        /// <summary>
        /// Name of the requirements set represented in this product type definition.
        /// </summary>
        /// <value>Name of the requirements set represented in this product type definition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequirementsEnum
        {
            
            /// <summary>
            /// Enum LISTING for value: LISTING
            /// </summary>
            [EnumMember(Value = "LISTING")]
            LISTING = 1,
            
            /// <summary>
            /// Enum LISTINGPRODUCTONLY for value: LISTING_PRODUCT_ONLY
            /// </summary>
            [EnumMember(Value = "LISTING_PRODUCT_ONLY")]
            LISTINGPRODUCTONLY = 2,
            
            /// <summary>
            /// Enum LISTINGOFFERONLY for value: LISTING_OFFER_ONLY
            /// </summary>
            [EnumMember(Value = "LISTING_OFFER_ONLY")]
            LISTINGOFFERONLY = 3
        }

        /// <summary>
        /// Name of the requirements set represented in this product type definition.
        /// </summary>
        /// <value>Name of the requirements set represented in this product type definition.</value>
        [DataMember(Name="requirements", EmitDefaultValue=false)]
        public RequirementsEnum Requirements { get; set; }
        /// <summary>
        /// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
        /// </summary>
        /// <value>Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequirementsEnforcedEnum
        {
            
            /// <summary>
            /// Enum ENFORCED for value: ENFORCED
            /// </summary>
            [EnumMember(Value = "ENFORCED")]
            ENFORCED = 1,
            
            /// <summary>
            /// Enum NOTENFORCED for value: NOT_ENFORCED
            /// </summary>
            [EnumMember(Value = "NOT_ENFORCED")]
            NOTENFORCED = 2
        }

        /// <summary>
        /// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
        /// </summary>
        /// <value>Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).</value>
        [DataMember(Name="requirementsEnforced", EmitDefaultValue=false)]
        public RequirementsEnforcedEnum RequirementsEnforced { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTypeDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductTypeDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTypeDefinition" /> class.
        /// </summary>
        /// <param name="metaSchema">Link to meta-schema describing the vocabulary used by the product type schema..</param>
        /// <param name="schema">Link to schema describing the attributes and requirements for the product type. (required).</param>
        /// <param name="requirements">Name of the requirements set represented in this product type definition. (required).</param>
        /// <param name="requirementsEnforced">Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates). (required).</param>
        /// <param name="propertyGroups">Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes. (required).</param>
        /// <param name="locale">Locale of the display elements contained in the product type definition. (required).</param>
        /// <param name="marketplaceIds">Amazon marketplace identifiers for which the product type definition is applicable. (required).</param>
        /// <param name="productType">The name of the Amazon product type that this product type definition applies to. (required).</param>
        /// <param name="productTypeVersion">The version details for the Amazon product type. (required).</param>
        public ProductTypeDefinition(SchemaLink metaSchema = default(SchemaLink), SchemaLink schema = default(SchemaLink), RequirementsEnum requirements = default(RequirementsEnum), RequirementsEnforcedEnum requirementsEnforced = default(RequirementsEnforcedEnum), Dictionary<string, PropertyGroup> propertyGroups = default(Dictionary<string, PropertyGroup>), string locale = default(string), List<string> marketplaceIds = default(List<string>), string productType = default(string), ProductTypeVersion productTypeVersion = default(ProductTypeVersion))
        {
            // to ensure "schema" is required (not null)
            if (schema == null)
            {
                throw new InvalidDataException("schema is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.Schema = schema;
            }
            // to ensure "requirements" is required (not null)
            if (requirements == null)
            {
                throw new InvalidDataException("requirements is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.Requirements = requirements;
            }
            // to ensure "requirementsEnforced" is required (not null)
            if (requirementsEnforced == null)
            {
                throw new InvalidDataException("requirementsEnforced is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.RequirementsEnforced = requirementsEnforced;
            }
            // to ensure "propertyGroups" is required (not null)
            if (propertyGroups == null)
            {
                throw new InvalidDataException("propertyGroups is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.PropertyGroups = propertyGroups;
            }
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new InvalidDataException("locale is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.Locale = locale;
            }
            // to ensure "marketplaceIds" is required (not null)
            if (marketplaceIds == null)
            {
                throw new InvalidDataException("marketplaceIds is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.MarketplaceIds = marketplaceIds;
            }
            // to ensure "productType" is required (not null)
            if (productType == null)
            {
                throw new InvalidDataException("productType is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.ProductType = productType;
            }
            // to ensure "productTypeVersion" is required (not null)
            if (productTypeVersion == null)
            {
                throw new InvalidDataException("productTypeVersion is a required property for ProductTypeDefinition and cannot be null");
            }
            else
            {
                this.ProductTypeVersion = productTypeVersion;
            }
            this.MetaSchema = metaSchema;
        }
        
        /// <summary>
        /// Link to meta-schema describing the vocabulary used by the product type schema.
        /// </summary>
        /// <value>Link to meta-schema describing the vocabulary used by the product type schema.</value>
        [DataMember(Name="metaSchema", EmitDefaultValue=false)]
        public SchemaLink MetaSchema { get; set; }

        /// <summary>
        /// Link to schema describing the attributes and requirements for the product type.
        /// </summary>
        /// <value>Link to schema describing the attributes and requirements for the product type.</value>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public SchemaLink Schema { get; set; }



        /// <summary>
        /// Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.
        /// </summary>
        /// <value>Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.</value>
        [DataMember(Name="propertyGroups", EmitDefaultValue=false)]
        public Dictionary<string, PropertyGroup> PropertyGroups { get; set; }

        /// <summary>
        /// Locale of the display elements contained in the product type definition.
        /// </summary>
        /// <value>Locale of the display elements contained in the product type definition.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Amazon marketplace identifiers for which the product type definition is applicable.
        /// </summary>
        /// <value>Amazon marketplace identifiers for which the product type definition is applicable.</value>
        [DataMember(Name="marketplaceIds", EmitDefaultValue=false)]
        public List<string> MarketplaceIds { get; set; }

        /// <summary>
        /// The name of the Amazon product type that this product type definition applies to.
        /// </summary>
        /// <value>The name of the Amazon product type that this product type definition applies to.</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public string ProductType { get; set; }

        /// <summary>
        /// The version details for the Amazon product type.
        /// </summary>
        /// <value>The version details for the Amazon product type.</value>
        [DataMember(Name="productTypeVersion", EmitDefaultValue=false)]
        public ProductTypeVersion ProductTypeVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductTypeDefinition {\n");
            sb.Append("  MetaSchema: ").Append(MetaSchema).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("  RequirementsEnforced: ").Append(RequirementsEnforced).Append("\n");
            sb.Append("  PropertyGroups: ").Append(PropertyGroups).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MarketplaceIds: ").Append(MarketplaceIds).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductTypeVersion: ").Append(ProductTypeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductTypeDefinition);
        }

        /// <summary>
        /// Returns true if ProductTypeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductTypeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductTypeDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MetaSchema == input.MetaSchema ||
                    (this.MetaSchema != null &&
                    this.MetaSchema.Equals(input.MetaSchema))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Requirements == input.Requirements ||
                    (this.Requirements != null &&
                    this.Requirements.Equals(input.Requirements))
                ) && 
                (
                    this.RequirementsEnforced == input.RequirementsEnforced ||
                    (this.RequirementsEnforced != null &&
                    this.RequirementsEnforced.Equals(input.RequirementsEnforced))
                ) && 
                (
                    this.PropertyGroups == input.PropertyGroups ||
                    this.PropertyGroups != null &&
                    this.PropertyGroups.SequenceEqual(input.PropertyGroups)
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MarketplaceIds == input.MarketplaceIds ||
                    this.MarketplaceIds != null &&
                    this.MarketplaceIds.SequenceEqual(input.MarketplaceIds)
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.ProductTypeVersion == input.ProductTypeVersion ||
                    (this.ProductTypeVersion != null &&
                    this.ProductTypeVersion.Equals(input.ProductTypeVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MetaSchema != null)
                    hashCode = hashCode * 59 + this.MetaSchema.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                if (this.Requirements != null)
                    hashCode = hashCode * 59 + this.Requirements.GetHashCode();
                if (this.RequirementsEnforced != null)
                    hashCode = hashCode * 59 + this.RequirementsEnforced.GetHashCode();
                if (this.PropertyGroups != null)
                    hashCode = hashCode * 59 + this.PropertyGroups.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.MarketplaceIds != null)
                    hashCode = hashCode * 59 + this.MarketplaceIds.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.ProductTypeVersion != null)
                    hashCode = hashCode * 59 + this.ProductTypeVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
