/* 
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductTypes
{
    /// <summary>
    /// The version details for an Amazon product type.
    /// </summary>
    [DataContract]
    public partial class ProductTypeVersion :  IEquatable<ProductTypeVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTypeVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductTypeVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTypeVersion" /> class.
        /// </summary>
        /// <param name="version">Version identifier. (required).</param>
        /// <param name="latest">When true, the version indicated by the version identifier is the latest available for the Amazon product type. (required).</param>
        /// <param name="releaseCandidate">When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type..</param>
        public ProductTypeVersion(string version = default(string), bool? latest = default(bool?), bool? releaseCandidate = default(bool?))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for ProductTypeVersion and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "latest" is required (not null)
            if (latest == null)
            {
                throw new InvalidDataException("latest is a required property for ProductTypeVersion and cannot be null");
            }
            else
            {
                this.Latest = latest;
            }
            this.ReleaseCandidate = releaseCandidate;
        }
        
        /// <summary>
        /// Version identifier.
        /// </summary>
        /// <value>Version identifier.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// When true, the version indicated by the version identifier is the latest available for the Amazon product type.
        /// </summary>
        /// <value>When true, the version indicated by the version identifier is the latest available for the Amazon product type.</value>
        [DataMember(Name="latest", EmitDefaultValue=false)]
        public bool? Latest { get; set; }

        /// <summary>
        /// When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.
        /// </summary>
        /// <value>When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.</value>
        [DataMember(Name="releaseCandidate", EmitDefaultValue=false)]
        public bool? ReleaseCandidate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductTypeVersion {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  ReleaseCandidate: ").Append(ReleaseCandidate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductTypeVersion);
        }

        /// <summary>
        /// Returns true if ProductTypeVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductTypeVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductTypeVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                ) && 
                (
                    this.ReleaseCandidate == input.ReleaseCandidate ||
                    (this.ReleaseCandidate != null &&
                    this.ReleaseCandidate.Equals(input.ReleaseCandidate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Latest != null)
                    hashCode = hashCode * 59 + this.Latest.GetHashCode();
                if (this.ReleaseCandidate != null)
                    hashCode = hashCode * 59 + this.ReleaseCandidate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
