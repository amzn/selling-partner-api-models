/* 
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.ProductTypes
{
    /// <summary>
    /// Link to retrieve the schema.
    /// </summary>
    [DataContract]
    public partial class SchemaLinkLink :  IEquatable<SchemaLinkLink>, IValidatableObject
    {
        /// <summary>
        /// HTTP method for the link operation.
        /// </summary>
        /// <value>HTTP method for the link operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerbEnum
        {
            
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1
        }

        /// <summary>
        /// HTTP method for the link operation.
        /// </summary>
        /// <value>HTTP method for the link operation.</value>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public VerbEnum Verb { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaLinkLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SchemaLinkLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaLinkLink" /> class.
        /// </summary>
        /// <param name="resource">URI resource for the link. (required).</param>
        /// <param name="verb">HTTP method for the link operation. (required).</param>
        public SchemaLinkLink(string resource = default(string), VerbEnum verb = default(VerbEnum))
        {
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for SchemaLinkLink and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }
            // to ensure "verb" is required (not null)
            if (verb == null)
            {
                throw new InvalidDataException("verb is a required property for SchemaLinkLink and cannot be null");
            }
            else
            {
                this.Verb = verb;
            }
        }
        
        /// <summary>
        /// URI resource for the link.
        /// </summary>
        /// <value>URI resource for the link.</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemaLinkLink {\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchemaLinkLink);
        }

        /// <summary>
        /// Returns true if SchemaLinkLink instances are equal
        /// </summary>
        /// <param name="input">Instance of SchemaLinkLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemaLinkLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Verb == input.Verb ||
                    (this.Verb != null &&
                    this.Verb.Equals(input.Verb))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.Verb != null)
                    hashCode = hashCode * 59 + this.Verb.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
