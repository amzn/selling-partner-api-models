/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// BuyBoxPriceType
    /// </summary>
    [DataContract]
    public partial class BuyBoxPriceType :  IEquatable<BuyBoxPriceType>, IValidatableObject
    {
        /// <summary>
        /// Indicates the type of customer that the offer is valid for.&lt;br&gt;&lt;br&gt;When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN.
        /// </summary>
        /// <value>Indicates the type of customer that the offer is valid for.&lt;br&gt;&lt;br&gt;When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN.</value>
        [DataMember(Name="offerType", EmitDefaultValue=false)]
        public OfferCustomerType? OfferType { get; set; }
        /// <summary>
        /// Indicates the type of quantity discount this price applies to.
        /// </summary>
        /// <value>Indicates the type of quantity discount this price applies to.</value>
        [DataMember(Name="quantityDiscountType", EmitDefaultValue=false)]
        public QuantityDiscountType? QuantityDiscountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyBoxPriceType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuyBoxPriceType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyBoxPriceType" /> class.
        /// </summary>
        /// <param name="condition">Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club. (required).</param>
        /// <param name="offerType">Indicates the type of customer that the offer is valid for.&lt;br&gt;&lt;br&gt;When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN..</param>
        /// <param name="quantityTier">Indicates at what quantity this price becomes active..</param>
        /// <param name="quantityDiscountType">Indicates the type of quantity discount this price applies to..</param>
        /// <param name="landedPrice">The value calculated by adding ListingPrice + Shipping - Points. (required).</param>
        /// <param name="listingPrice">The price of the item. (required).</param>
        /// <param name="shipping">The shipping cost. (required).</param>
        /// <param name="points">The number of Amazon Points offered with the purchase of an item..</param>
        /// <param name="sellerId">The seller identifier for the offer..</param>
        public BuyBoxPriceType(string condition = default(string), OfferCustomerType? offerType = default(OfferCustomerType?), int? quantityTier = default(int?), QuantityDiscountType? quantityDiscountType = default(QuantityDiscountType?), MoneyType landedPrice = default(MoneyType), MoneyType listingPrice = default(MoneyType), MoneyType shipping = default(MoneyType), Points points = default(Points), string sellerId = default(string))
        {
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new InvalidDataException("condition is a required property for BuyBoxPriceType and cannot be null");
            }
            else
            {
                this.Condition = condition;
            }
            // to ensure "landedPrice" is required (not null)
            if (landedPrice == null)
            {
                throw new InvalidDataException("landedPrice is a required property for BuyBoxPriceType and cannot be null");
            }
            else
            {
                this.LandedPrice = landedPrice;
            }
            // to ensure "listingPrice" is required (not null)
            if (listingPrice == null)
            {
                throw new InvalidDataException("listingPrice is a required property for BuyBoxPriceType and cannot be null");
            }
            else
            {
                this.ListingPrice = listingPrice;
            }
            // to ensure "shipping" is required (not null)
            if (shipping == null)
            {
                throw new InvalidDataException("shipping is a required property for BuyBoxPriceType and cannot be null");
            }
            else
            {
                this.Shipping = shipping;
            }
            this.OfferType = offerType;
            this.QuantityTier = quantityTier;
            this.QuantityDiscountType = quantityDiscountType;
            this.Points = points;
            this.SellerId = sellerId;
        }
        
        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }


        /// <summary>
        /// Indicates at what quantity this price becomes active.
        /// </summary>
        /// <value>Indicates at what quantity this price becomes active.</value>
        [DataMember(Name="quantityTier", EmitDefaultValue=false)]
        public int? QuantityTier { get; set; }


        /// <summary>
        /// The value calculated by adding ListingPrice + Shipping - Points.
        /// </summary>
        /// <value>The value calculated by adding ListingPrice + Shipping - Points.</value>
        [DataMember(Name="LandedPrice", EmitDefaultValue=false)]
        public MoneyType LandedPrice { get; set; }

        /// <summary>
        /// The price of the item.
        /// </summary>
        /// <value>The price of the item.</value>
        [DataMember(Name="ListingPrice", EmitDefaultValue=false)]
        public MoneyType ListingPrice { get; set; }

        /// <summary>
        /// The shipping cost.
        /// </summary>
        /// <value>The shipping cost.</value>
        [DataMember(Name="Shipping", EmitDefaultValue=false)]
        public MoneyType Shipping { get; set; }

        /// <summary>
        /// The number of Amazon Points offered with the purchase of an item.
        /// </summary>
        /// <value>The number of Amazon Points offered with the purchase of an item.</value>
        [DataMember(Name="Points", EmitDefaultValue=false)]
        public Points Points { get; set; }

        /// <summary>
        /// The seller identifier for the offer.
        /// </summary>
        /// <value>The seller identifier for the offer.</value>
        [DataMember(Name="sellerId", EmitDefaultValue=false)]
        public string SellerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuyBoxPriceType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  OfferType: ").Append(OfferType).Append("\n");
            sb.Append("  QuantityTier: ").Append(QuantityTier).Append("\n");
            sb.Append("  QuantityDiscountType: ").Append(QuantityDiscountType).Append("\n");
            sb.Append("  LandedPrice: ").Append(LandedPrice).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuyBoxPriceType);
        }

        /// <summary>
        /// Returns true if BuyBoxPriceType instances are equal
        /// </summary>
        /// <param name="input">Instance of BuyBoxPriceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuyBoxPriceType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.OfferType == input.OfferType ||
                    (this.OfferType != null &&
                    this.OfferType.Equals(input.OfferType))
                ) && 
                (
                    this.QuantityTier == input.QuantityTier ||
                    (this.QuantityTier != null &&
                    this.QuantityTier.Equals(input.QuantityTier))
                ) && 
                (
                    this.QuantityDiscountType == input.QuantityDiscountType ||
                    (this.QuantityDiscountType != null &&
                    this.QuantityDiscountType.Equals(input.QuantityDiscountType))
                ) && 
                (
                    this.LandedPrice == input.LandedPrice ||
                    (this.LandedPrice != null &&
                    this.LandedPrice.Equals(input.LandedPrice))
                ) && 
                (
                    this.ListingPrice == input.ListingPrice ||
                    (this.ListingPrice != null &&
                    this.ListingPrice.Equals(input.ListingPrice))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.OfferType != null)
                    hashCode = hashCode * 59 + this.OfferType.GetHashCode();
                if (this.QuantityTier != null)
                    hashCode = hashCode * 59 + this.QuantityTier.GetHashCode();
                if (this.QuantityDiscountType != null)
                    hashCode = hashCode * 59 + this.QuantityDiscountType.GetHashCode();
                if (this.LandedPrice != null)
                    hashCode = hashCode * 59 + this.LandedPrice.GetHashCode();
                if (this.ListingPrice != null)
                    hashCode = hashCode * 59 + this.ListingPrice.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.SellerId != null)
                    hashCode = hashCode * 59 + this.SellerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
