/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// Information about the seller&#39;s feedback, including the percentage of positive feedback, and the total number of ratings received.
    /// </summary>
    [DataContract]
    public partial class SellerFeedbackType :  IEquatable<SellerFeedbackType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerFeedbackType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellerFeedbackType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerFeedbackType" /> class.
        /// </summary>
        /// <param name="sellerPositiveFeedbackRating">The percentage of positive feedback for the seller in the past 365 days..</param>
        /// <param name="feedbackCount">The number of ratings received about the seller. (required).</param>
        public SellerFeedbackType(double? sellerPositiveFeedbackRating = default(double?), long? feedbackCount = default(long?))
        {
            // to ensure "feedbackCount" is required (not null)
            if (feedbackCount == null)
            {
                throw new InvalidDataException("feedbackCount is a required property for SellerFeedbackType and cannot be null");
            }
            else
            {
                this.FeedbackCount = feedbackCount;
            }
            this.SellerPositiveFeedbackRating = sellerPositiveFeedbackRating;
        }
        
        /// <summary>
        /// The percentage of positive feedback for the seller in the past 365 days.
        /// </summary>
        /// <value>The percentage of positive feedback for the seller in the past 365 days.</value>
        [DataMember(Name="SellerPositiveFeedbackRating", EmitDefaultValue=false)]
        public double? SellerPositiveFeedbackRating { get; set; }

        /// <summary>
        /// The number of ratings received about the seller.
        /// </summary>
        /// <value>The number of ratings received about the seller.</value>
        [DataMember(Name="FeedbackCount", EmitDefaultValue=false)]
        public long? FeedbackCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellerFeedbackType {\n");
            sb.Append("  SellerPositiveFeedbackRating: ").Append(SellerPositiveFeedbackRating).Append("\n");
            sb.Append("  FeedbackCount: ").Append(FeedbackCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellerFeedbackType);
        }

        /// <summary>
        /// Returns true if SellerFeedbackType instances are equal
        /// </summary>
        /// <param name="input">Instance of SellerFeedbackType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellerFeedbackType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerPositiveFeedbackRating == input.SellerPositiveFeedbackRating ||
                    (this.SellerPositiveFeedbackRating != null &&
                    this.SellerPositiveFeedbackRating.Equals(input.SellerPositiveFeedbackRating))
                ) && 
                (
                    this.FeedbackCount == input.FeedbackCount ||
                    (this.FeedbackCount != null &&
                    this.FeedbackCount.Equals(input.FeedbackCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerPositiveFeedbackRating != null)
                    hashCode = hashCode * 59 + this.SellerPositiveFeedbackRating.GetHashCode();
                if (this.FeedbackCount != null)
                    hashCode = hashCode * 59 + this.FeedbackCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
