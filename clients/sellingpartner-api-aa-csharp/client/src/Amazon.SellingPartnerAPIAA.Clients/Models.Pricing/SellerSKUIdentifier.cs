/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// SellerSKUIdentifier
    /// </summary>
    [DataContract]
    public partial class SellerSKUIdentifier :  IEquatable<SellerSKUIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerSKUIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellerSKUIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellerSKUIdentifier" /> class.
        /// </summary>
        /// <param name="marketplaceId">A marketplace identifier. (required).</param>
        /// <param name="sellerId">The seller identifier submitted for the operation. (required).</param>
        /// <param name="sellerSKU">The seller stock keeping unit (SKU) of the item. (required).</param>
        public SellerSKUIdentifier(string marketplaceId = default(string), string sellerId = default(string), string sellerSKU = default(string))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for SellerSKUIdentifier and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "sellerId" is required (not null)
            if (sellerId == null)
            {
                throw new InvalidDataException("sellerId is a required property for SellerSKUIdentifier and cannot be null");
            }
            else
            {
                this.SellerId = sellerId;
            }
            // to ensure "sellerSKU" is required (not null)
            if (sellerSKU == null)
            {
                throw new InvalidDataException("sellerSKU is a required property for SellerSKUIdentifier and cannot be null");
            }
            else
            {
                this.SellerSKU = sellerSKU;
            }
        }
        
        /// <summary>
        /// A marketplace identifier.
        /// </summary>
        /// <value>A marketplace identifier.</value>
        [DataMember(Name="MarketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The seller identifier submitted for the operation.
        /// </summary>
        /// <value>The seller identifier submitted for the operation.</value>
        [DataMember(Name="SellerId", EmitDefaultValue=false)]
        public string SellerId { get; set; }

        /// <summary>
        /// The seller stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>The seller stock keeping unit (SKU) of the item.</value>
        [DataMember(Name="SellerSKU", EmitDefaultValue=false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellerSKUIdentifier {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellerSKUIdentifier);
        }

        /// <summary>
        /// Returns true if SellerSKUIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of SellerSKUIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellerSKUIdentifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.SellerId != null)
                    hashCode = hashCode * 59 + this.SellerId.GetHashCode();
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
