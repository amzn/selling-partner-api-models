/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// The total number of offers for the specified condition and fulfillment channel.
    /// </summary>
    [DataContract]
    public partial class OfferCountType :  IEquatable<OfferCountType>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the item is fulfilled by Amazon or by the seller.
        /// </summary>
        /// <value>Indicates whether the item is fulfilled by Amazon or by the seller.</value>
        [DataMember(Name="fulfillmentChannel", EmitDefaultValue=false)]
        public FulfillmentChannelType? FulfillmentChannel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferCountType" /> class.
        /// </summary>
        /// <param name="condition">Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club..</param>
        /// <param name="fulfillmentChannel">Indicates whether the item is fulfilled by Amazon or by the seller..</param>
        /// <param name="offerCount">The number of offers in a fulfillment channel that meet a specific condition..</param>
        public OfferCountType(string condition = default(string), FulfillmentChannelType? fulfillmentChannel = default(FulfillmentChannelType?), int? offerCount = default(int?))
        {
            this.Condition = condition;
            this.FulfillmentChannel = fulfillmentChannel;
            this.OfferCount = offerCount;
        }
        
        /// <summary>
        /// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        /// <value>Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }


        /// <summary>
        /// The number of offers in a fulfillment channel that meet a specific condition.
        /// </summary>
        /// <value>The number of offers in a fulfillment channel that meet a specific condition.</value>
        [DataMember(Name="OfferCount", EmitDefaultValue=false)]
        public int? OfferCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferCountType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  FulfillmentChannel: ").Append(FulfillmentChannel).Append("\n");
            sb.Append("  OfferCount: ").Append(OfferCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferCountType);
        }

        /// <summary>
        /// Returns true if OfferCountType instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferCountType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferCountType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.FulfillmentChannel == input.FulfillmentChannel ||
                    (this.FulfillmentChannel != null &&
                    this.FulfillmentChannel.Equals(input.FulfillmentChannel))
                ) && 
                (
                    this.OfferCount == input.OfferCount ||
                    (this.OfferCount != null &&
                    this.OfferCount.Equals(input.OfferCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.FulfillmentChannel != null)
                    hashCode = hashCode * 59 + this.FulfillmentChannel.GetHashCode();
                if (this.OfferCount != null)
                    hashCode = hashCode * 59 + this.OfferCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
