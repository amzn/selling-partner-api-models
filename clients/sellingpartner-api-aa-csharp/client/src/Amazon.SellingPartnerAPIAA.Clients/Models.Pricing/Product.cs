/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// An item.
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="identifiers">identifiers (required).</param>
        /// <param name="attributeSets">attributeSets.</param>
        /// <param name="relationships">relationships.</param>
        /// <param name="competitivePricing">competitivePricing.</param>
        /// <param name="salesRankings">salesRankings.</param>
        /// <param name="offers">offers.</param>
        public Product(IdentifierType identifiers = default(IdentifierType), AttributeSetList attributeSets = default(AttributeSetList), RelationshipList relationships = default(RelationshipList), CompetitivePricingType competitivePricing = default(CompetitivePricingType), SalesRankList salesRankings = default(SalesRankList), OffersList offers = default(OffersList))
        {
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new InvalidDataException("identifiers is a required property for Product and cannot be null");
            }
            else
            {
                this.Identifiers = identifiers;
            }
            this.AttributeSets = attributeSets;
            this.Relationships = relationships;
            this.CompetitivePricing = competitivePricing;
            this.SalesRankings = salesRankings;
            this.Offers = offers;
        }
        
        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name="Identifiers", EmitDefaultValue=false)]
        public IdentifierType Identifiers { get; set; }

        /// <summary>
        /// Gets or Sets AttributeSets
        /// </summary>
        [DataMember(Name="AttributeSets", EmitDefaultValue=false)]
        public AttributeSetList AttributeSets { get; set; }

        /// <summary>
        /// Gets or Sets Relationships
        /// </summary>
        [DataMember(Name="Relationships", EmitDefaultValue=false)]
        public RelationshipList Relationships { get; set; }

        /// <summary>
        /// Gets or Sets CompetitivePricing
        /// </summary>
        [DataMember(Name="CompetitivePricing", EmitDefaultValue=false)]
        public CompetitivePricingType CompetitivePricing { get; set; }

        /// <summary>
        /// Gets or Sets SalesRankings
        /// </summary>
        [DataMember(Name="SalesRankings", EmitDefaultValue=false)]
        public SalesRankList SalesRankings { get; set; }

        /// <summary>
        /// Gets or Sets Offers
        /// </summary>
        [DataMember(Name="Offers", EmitDefaultValue=false)]
        public OffersList Offers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  AttributeSets: ").Append(AttributeSets).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  CompetitivePricing: ").Append(CompetitivePricing).Append("\n");
            sb.Append("  SalesRankings: ").Append(SalesRankings).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifiers == input.Identifiers ||
                    (this.Identifiers != null &&
                    this.Identifiers.Equals(input.Identifiers))
                ) && 
                (
                    this.AttributeSets == input.AttributeSets ||
                    (this.AttributeSets != null &&
                    this.AttributeSets.Equals(input.AttributeSets))
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    (this.Relationships != null &&
                    this.Relationships.Equals(input.Relationships))
                ) && 
                (
                    this.CompetitivePricing == input.CompetitivePricing ||
                    (this.CompetitivePricing != null &&
                    this.CompetitivePricing.Equals(input.CompetitivePricing))
                ) && 
                (
                    this.SalesRankings == input.SalesRankings ||
                    (this.SalesRankings != null &&
                    this.SalesRankings.Equals(input.SalesRankings))
                ) && 
                (
                    this.Offers == input.Offers ||
                    (this.Offers != null &&
                    this.Offers.Equals(input.Offers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.AttributeSets != null)
                    hashCode = hashCode * 59 + this.AttributeSets.GetHashCode();
                if (this.Relationships != null)
                    hashCode = hashCode * 59 + this.Relationships.GetHashCode();
                if (this.CompetitivePricing != null)
                    hashCode = hashCode * 59 + this.CompetitivePricing.GetHashCode();
                if (this.SalesRankings != null)
                    hashCode = hashCode * 59 + this.SalesRankings.GetHashCode();
                if (this.Offers != null)
                    hashCode = hashCode * 59 + this.Offers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
