/* 
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Pricing
{
    /// <summary>
    /// A mapping of additional HTTP headers to send/receive for the individual batch request.
    /// </summary>
    [DataContract]
    public partial class HttpResponseHeaders : Dictionary<String, string>,  IEquatable<HttpResponseHeaders>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpResponseHeaders" /> class.
        /// </summary>
        /// <param name="date">The timestamp that the API request was received.  For more information, consult [RFC 2616 Section 14](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)..</param>
        /// <param name="xAmznRequestId">Unique request reference ID..</param>
        public HttpResponseHeaders(string date = default(string), string xAmznRequestId = default(string)) : base()
        {
            this.Date = date;
            this.XAmznRequestId = xAmznRequestId;
        }
        
        /// <summary>
        /// The timestamp that the API request was received.  For more information, consult [RFC 2616 Section 14](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
        /// </summary>
        /// <value>The timestamp that the API request was received.  For more information, consult [RFC 2616 Section 14](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).</value>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Unique request reference ID.
        /// </summary>
        /// <value>Unique request reference ID.</value>
        [DataMember(Name="x-amzn-RequestId", EmitDefaultValue=false)]
        public string XAmznRequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HttpResponseHeaders {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  XAmznRequestId: ").Append(XAmznRequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HttpResponseHeaders);
        }

        /// <summary>
        /// Returns true if HttpResponseHeaders instances are equal
        /// </summary>
        /// <param name="input">Instance of HttpResponseHeaders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpResponseHeaders input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.XAmznRequestId == input.XAmznRequestId ||
                    (this.XAmznRequestId != null &&
                    this.XAmznRequestId.Equals(input.XAmznRequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.XAmznRequestId != null)
                    hashCode = hashCode * 59 + this.XAmznRequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
