/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Catalog
{
    /// <summary>
    /// Relationship details for an Amazon catalog item.
    /// </summary>
    [DataContract]
    public partial class ItemRelationship :  IEquatable<ItemRelationship>, IValidatableObject
    {
        /// <summary>
        /// Type of relationship.
        /// </summary>
        /// <value>Type of relationship.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum VARIATION for value: VARIATION
            /// </summary>
            [EnumMember(Value = "VARIATION")]
            VARIATION = 1,
            
            /// <summary>
            /// Enum PACKAGEHIERARCHY for value: PACKAGE_HIERARCHY
            /// </summary>
            [EnumMember(Value = "PACKAGE_HIERARCHY")]
            PACKAGEHIERARCHY = 2
        }

        /// <summary>
        /// Type of relationship.
        /// </summary>
        /// <value>Type of relationship.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelationship" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemRelationship() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelationship" /> class.
        /// </summary>
        /// <param name="childAsins">Identifiers (ASINs) of the related items that are children of this item..</param>
        /// <param name="parentAsins">Identifiers (ASINs) of the related items that are parents of this item..</param>
        /// <param name="variationTheme">For \&quot;VARIATION\&quot; relationships, variation theme indicating the combination of Amazon item catalog attributes that define the variation family..</param>
        /// <param name="type">Type of relationship. (required).</param>
        public ItemRelationship(List<string> childAsins = default(List<string>), List<string> parentAsins = default(List<string>), ItemVariationTheme variationTheme = default(ItemVariationTheme), TypeEnum type = default(TypeEnum))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ItemRelationship and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ChildAsins = childAsins;
            this.ParentAsins = parentAsins;
            this.VariationTheme = variationTheme;
        }
        
        /// <summary>
        /// Identifiers (ASINs) of the related items that are children of this item.
        /// </summary>
        /// <value>Identifiers (ASINs) of the related items that are children of this item.</value>
        [DataMember(Name="childAsins", EmitDefaultValue=false)]
        public List<string> ChildAsins { get; set; }

        /// <summary>
        /// Identifiers (ASINs) of the related items that are parents of this item.
        /// </summary>
        /// <value>Identifiers (ASINs) of the related items that are parents of this item.</value>
        [DataMember(Name="parentAsins", EmitDefaultValue=false)]
        public List<string> ParentAsins { get; set; }

        /// <summary>
        /// For \&quot;VARIATION\&quot; relationships, variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
        /// </summary>
        /// <value>For \&quot;VARIATION\&quot; relationships, variation theme indicating the combination of Amazon item catalog attributes that define the variation family.</value>
        [DataMember(Name="variationTheme", EmitDefaultValue=false)]
        public ItemVariationTheme VariationTheme { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemRelationship {\n");
            sb.Append("  ChildAsins: ").Append(ChildAsins).Append("\n");
            sb.Append("  ParentAsins: ").Append(ParentAsins).Append("\n");
            sb.Append("  VariationTheme: ").Append(VariationTheme).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemRelationship);
        }

        /// <summary>
        /// Returns true if ItemRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemRelationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChildAsins == input.ChildAsins ||
                    this.ChildAsins != null &&
                    this.ChildAsins.SequenceEqual(input.ChildAsins)
                ) && 
                (
                    this.ParentAsins == input.ParentAsins ||
                    this.ParentAsins != null &&
                    this.ParentAsins.SequenceEqual(input.ParentAsins)
                ) && 
                (
                    this.VariationTheme == input.VariationTheme ||
                    (this.VariationTheme != null &&
                    this.VariationTheme.Equals(input.VariationTheme))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChildAsins != null)
                    hashCode = hashCode * 59 + this.ChildAsins.GetHashCode();
                if (this.ParentAsins != null)
                    hashCode = hashCode * 59 + this.ParentAsins.GetHashCode();
                if (this.VariationTheme != null)
                    hashCode = hashCode * 59 + this.VariationTheme.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
