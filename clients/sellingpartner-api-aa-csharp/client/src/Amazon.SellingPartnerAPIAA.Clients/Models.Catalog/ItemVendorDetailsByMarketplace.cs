/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Catalog
{
    /// <summary>
    /// Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [DataContract]
    public partial class ItemVendorDetailsByMarketplace :  IEquatable<ItemVendorDetailsByMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Replenishment category associated with an Amazon catalog item.
        /// </summary>
        /// <value>Replenishment category associated with an Amazon catalog item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReplenishmentCategoryEnum
        {
            
            /// <summary>
            /// Enum ALLOCATED for value: ALLOCATED
            /// </summary>
            [EnumMember(Value = "ALLOCATED")]
            ALLOCATED = 1,
            
            /// <summary>
            /// Enum BASICREPLENISHMENT for value: BASIC_REPLENISHMENT
            /// </summary>
            [EnumMember(Value = "BASIC_REPLENISHMENT")]
            BASICREPLENISHMENT = 2,
            
            /// <summary>
            /// Enum INSEASON for value: IN_SEASON
            /// </summary>
            [EnumMember(Value = "IN_SEASON")]
            INSEASON = 3,
            
            /// <summary>
            /// Enum LIMITEDREPLENISHMENT for value: LIMITED_REPLENISHMENT
            /// </summary>
            [EnumMember(Value = "LIMITED_REPLENISHMENT")]
            LIMITEDREPLENISHMENT = 4,
            
            /// <summary>
            /// Enum MANUFACTUREROUTOFSTOCK for value: MANUFACTURER_OUT_OF_STOCK
            /// </summary>
            [EnumMember(Value = "MANUFACTURER_OUT_OF_STOCK")]
            MANUFACTUREROUTOFSTOCK = 5,
            
            /// <summary>
            /// Enum NEWPRODUCT for value: NEW_PRODUCT
            /// </summary>
            [EnumMember(Value = "NEW_PRODUCT")]
            NEWPRODUCT = 6,
            
            /// <summary>
            /// Enum NONREPLENISHABLE for value: NON_REPLENISHABLE
            /// </summary>
            [EnumMember(Value = "NON_REPLENISHABLE")]
            NONREPLENISHABLE = 7,
            
            /// <summary>
            /// Enum NONSTOCKUPABLE for value: NON_STOCKUPABLE
            /// </summary>
            [EnumMember(Value = "NON_STOCKUPABLE")]
            NONSTOCKUPABLE = 8,
            
            /// <summary>
            /// Enum OBSOLETE for value: OBSOLETE
            /// </summary>
            [EnumMember(Value = "OBSOLETE")]
            OBSOLETE = 9,
            
            /// <summary>
            /// Enum PLANNEDREPLENISHMENT for value: PLANNED_REPLENISHMENT
            /// </summary>
            [EnumMember(Value = "PLANNED_REPLENISHMENT")]
            PLANNEDREPLENISHMENT = 10
        }

        /// <summary>
        /// Replenishment category associated with an Amazon catalog item.
        /// </summary>
        /// <value>Replenishment category associated with an Amazon catalog item.</value>
        [DataMember(Name="replenishmentCategory", EmitDefaultValue=false)]
        public ReplenishmentCategoryEnum? ReplenishmentCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVendorDetailsByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemVendorDetailsByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVendorDetailsByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. (required).</param>
        /// <param name="brandCode">Brand code associated with an Amazon catalog item..</param>
        /// <param name="manufacturerCode">Manufacturer code associated with an Amazon catalog item..</param>
        /// <param name="manufacturerCodeParent">Parent vendor code of the manufacturer code..</param>
        /// <param name="productCategory">Product category associated with an Amazon catalog item..</param>
        /// <param name="productGroup">Product group associated with an Amazon catalog item..</param>
        /// <param name="productSubcategory">Product subcategory associated with an Amazon catalog item..</param>
        /// <param name="replenishmentCategory">Replenishment category associated with an Amazon catalog item..</param>
        public ItemVendorDetailsByMarketplace(string marketplaceId = default(string), string brandCode = default(string), string manufacturerCode = default(string), string manufacturerCodeParent = default(string), ItemVendorDetailsCategory productCategory = default(ItemVendorDetailsCategory), string productGroup = default(string), ItemVendorDetailsCategory productSubcategory = default(ItemVendorDetailsCategory), ReplenishmentCategoryEnum? replenishmentCategory = default(ReplenishmentCategoryEnum?))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemVendorDetailsByMarketplace and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            this.BrandCode = brandCode;
            this.ManufacturerCode = manufacturerCode;
            this.ManufacturerCodeParent = manufacturerCodeParent;
            this.ProductCategory = productCategory;
            this.ProductGroup = productGroup;
            this.ProductSubcategory = productSubcategory;
            this.ReplenishmentCategory = replenishmentCategory;
        }
        
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Brand code associated with an Amazon catalog item.
        /// </summary>
        /// <value>Brand code associated with an Amazon catalog item.</value>
        [DataMember(Name="brandCode", EmitDefaultValue=false)]
        public string BrandCode { get; set; }

        /// <summary>
        /// Manufacturer code associated with an Amazon catalog item.
        /// </summary>
        /// <value>Manufacturer code associated with an Amazon catalog item.</value>
        [DataMember(Name="manufacturerCode", EmitDefaultValue=false)]
        public string ManufacturerCode { get; set; }

        /// <summary>
        /// Parent vendor code of the manufacturer code.
        /// </summary>
        /// <value>Parent vendor code of the manufacturer code.</value>
        [DataMember(Name="manufacturerCodeParent", EmitDefaultValue=false)]
        public string ManufacturerCodeParent { get; set; }

        /// <summary>
        /// Product category associated with an Amazon catalog item.
        /// </summary>
        /// <value>Product category associated with an Amazon catalog item.</value>
        [DataMember(Name="productCategory", EmitDefaultValue=false)]
        public ItemVendorDetailsCategory ProductCategory { get; set; }

        /// <summary>
        /// Product group associated with an Amazon catalog item.
        /// </summary>
        /// <value>Product group associated with an Amazon catalog item.</value>
        [DataMember(Name="productGroup", EmitDefaultValue=false)]
        public string ProductGroup { get; set; }

        /// <summary>
        /// Product subcategory associated with an Amazon catalog item.
        /// </summary>
        /// <value>Product subcategory associated with an Amazon catalog item.</value>
        [DataMember(Name="productSubcategory", EmitDefaultValue=false)]
        public ItemVendorDetailsCategory ProductSubcategory { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemVendorDetailsByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  BrandCode: ").Append(BrandCode).Append("\n");
            sb.Append("  ManufacturerCode: ").Append(ManufacturerCode).Append("\n");
            sb.Append("  ManufacturerCodeParent: ").Append(ManufacturerCodeParent).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  ProductGroup: ").Append(ProductGroup).Append("\n");
            sb.Append("  ProductSubcategory: ").Append(ProductSubcategory).Append("\n");
            sb.Append("  ReplenishmentCategory: ").Append(ReplenishmentCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemVendorDetailsByMarketplace);
        }

        /// <summary>
        /// Returns true if ItemVendorDetailsByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemVendorDetailsByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemVendorDetailsByMarketplace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.BrandCode == input.BrandCode ||
                    (this.BrandCode != null &&
                    this.BrandCode.Equals(input.BrandCode))
                ) && 
                (
                    this.ManufacturerCode == input.ManufacturerCode ||
                    (this.ManufacturerCode != null &&
                    this.ManufacturerCode.Equals(input.ManufacturerCode))
                ) && 
                (
                    this.ManufacturerCodeParent == input.ManufacturerCodeParent ||
                    (this.ManufacturerCodeParent != null &&
                    this.ManufacturerCodeParent.Equals(input.ManufacturerCodeParent))
                ) && 
                (
                    this.ProductCategory == input.ProductCategory ||
                    (this.ProductCategory != null &&
                    this.ProductCategory.Equals(input.ProductCategory))
                ) && 
                (
                    this.ProductGroup == input.ProductGroup ||
                    (this.ProductGroup != null &&
                    this.ProductGroup.Equals(input.ProductGroup))
                ) && 
                (
                    this.ProductSubcategory == input.ProductSubcategory ||
                    (this.ProductSubcategory != null &&
                    this.ProductSubcategory.Equals(input.ProductSubcategory))
                ) && 
                (
                    this.ReplenishmentCategory == input.ReplenishmentCategory ||
                    (this.ReplenishmentCategory != null &&
                    this.ReplenishmentCategory.Equals(input.ReplenishmentCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.BrandCode != null)
                    hashCode = hashCode * 59 + this.BrandCode.GetHashCode();
                if (this.ManufacturerCode != null)
                    hashCode = hashCode * 59 + this.ManufacturerCode.GetHashCode();
                if (this.ManufacturerCodeParent != null)
                    hashCode = hashCode * 59 + this.ManufacturerCodeParent.GetHashCode();
                if (this.ProductCategory != null)
                    hashCode = hashCode * 59 + this.ProductCategory.GetHashCode();
                if (this.ProductGroup != null)
                    hashCode = hashCode * 59 + this.ProductGroup.GetHashCode();
                if (this.ProductSubcategory != null)
                    hashCode = hashCode * 59 + this.ProductSubcategory.GetHashCode();
                if (this.ReplenishmentCategory != null)
                    hashCode = hashCode * 59 + this.ReplenishmentCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
