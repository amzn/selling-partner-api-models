/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPIAA.Clients.Client.SwaggerDateConverter;

namespace Amazon.SellingPartnerAPIAA.Clients.Models.Catalog
{
    /// <summary>
    /// Summary details of an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [DataContract]
    public partial class ItemSummaryByMarketplace :  IEquatable<ItemSummaryByMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Classification type associated with the Amazon catalog item.
        /// </summary>
        /// <value>Classification type associated with the Amazon catalog item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemClassificationEnum
        {
            
            /// <summary>
            /// Enum BASEPRODUCT for value: BASE_PRODUCT
            /// </summary>
            [EnumMember(Value = "BASE_PRODUCT")]
            BASEPRODUCT = 1,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 2,
            
            /// <summary>
            /// Enum PRODUCTBUNDLE for value: PRODUCT_BUNDLE
            /// </summary>
            [EnumMember(Value = "PRODUCT_BUNDLE")]
            PRODUCTBUNDLE = 3,
            
            /// <summary>
            /// Enum VARIATIONPARENT for value: VARIATION_PARENT
            /// </summary>
            [EnumMember(Value = "VARIATION_PARENT")]
            VARIATIONPARENT = 4
        }

        /// <summary>
        /// Classification type associated with the Amazon catalog item.
        /// </summary>
        /// <value>Classification type associated with the Amazon catalog item.</value>
        [DataMember(Name="itemClassification", EmitDefaultValue=false)]
        public ItemClassificationEnum? ItemClassification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemSummaryByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. (required).</param>
        /// <param name="adultProduct">Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature..</param>
        /// <param name="autographed">Identifies an Amazon catalog item is autographed by a player or celebrity..</param>
        /// <param name="brand">Name of the brand associated with an Amazon catalog item..</param>
        /// <param name="browseClassification">Classification (browse node) associated with an Amazon catalog item..</param>
        /// <param name="color">Name of the color associated with an Amazon catalog item..</param>
        /// <param name="contributors">Individual contributors to the creation of an item, such as the authors or actors..</param>
        /// <param name="itemClassification">Classification type associated with the Amazon catalog item..</param>
        /// <param name="itemName">Name, or title, associated with an Amazon catalog item..</param>
        /// <param name="manufacturer">Name of the manufacturer associated with an Amazon catalog item..</param>
        /// <param name="memorabilia">Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment..</param>
        /// <param name="modelNumber">Model number associated with an Amazon catalog item..</param>
        /// <param name="packageQuantity">Quantity of an Amazon catalog item in one package..</param>
        /// <param name="partNumber">Part number associated with an Amazon catalog item..</param>
        /// <param name="releaseDate">First date on which an Amazon catalog item is shippable to customers..</param>
        /// <param name="size">Name of the size associated with an Amazon catalog item..</param>
        /// <param name="style">Name of the style associated with an Amazon catalog item..</param>
        /// <param name="tradeInEligible">Identifies an Amazon catalog item is eligible for trade-in..</param>
        /// <param name="websiteDisplayGroup">Identifier of the website display group associated with an Amazon catalog item..</param>
        /// <param name="websiteDisplayGroupName">Display name of the website display group associated with an Amazon catalog item..</param>
        public ItemSummaryByMarketplace(string marketplaceId = default(string), bool? adultProduct = default(bool?), bool? autographed = default(bool?), string brand = default(string), ItemBrowseClassification browseClassification = default(ItemBrowseClassification), string color = default(string), List<ItemContributor> contributors = default(List<ItemContributor>), ItemClassificationEnum? itemClassification = default(ItemClassificationEnum?), string itemName = default(string), string manufacturer = default(string), bool? memorabilia = default(bool?), string modelNumber = default(string), int? packageQuantity = default(int?), string partNumber = default(string), DateTime? releaseDate = default(DateTime?), string size = default(string), string style = default(string), bool? tradeInEligible = default(bool?), string websiteDisplayGroup = default(string), string websiteDisplayGroupName = default(string))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemSummaryByMarketplace and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            this.AdultProduct = adultProduct;
            this.Autographed = autographed;
            this.Brand = brand;
            this.BrowseClassification = browseClassification;
            this.Color = color;
            this.Contributors = contributors;
            this.ItemClassification = itemClassification;
            this.ItemName = itemName;
            this.Manufacturer = manufacturer;
            this.Memorabilia = memorabilia;
            this.ModelNumber = modelNumber;
            this.PackageQuantity = packageQuantity;
            this.PartNumber = partNumber;
            this.ReleaseDate = releaseDate;
            this.Size = size;
            this.Style = style;
            this.TradeInEligible = tradeInEligible;
            this.WebsiteDisplayGroup = websiteDisplayGroup;
            this.WebsiteDisplayGroupName = websiteDisplayGroupName;
        }
        
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.
        /// </summary>
        /// <value>Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.</value>
        [DataMember(Name="adultProduct", EmitDefaultValue=false)]
        public bool? AdultProduct { get; set; }

        /// <summary>
        /// Identifies an Amazon catalog item is autographed by a player or celebrity.
        /// </summary>
        /// <value>Identifies an Amazon catalog item is autographed by a player or celebrity.</value>
        [DataMember(Name="autographed", EmitDefaultValue=false)]
        public bool? Autographed { get; set; }

        /// <summary>
        /// Name of the brand associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the brand associated with an Amazon catalog item.</value>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// Classification (browse node) associated with an Amazon catalog item.
        /// </summary>
        /// <value>Classification (browse node) associated with an Amazon catalog item.</value>
        [DataMember(Name="browseClassification", EmitDefaultValue=false)]
        public ItemBrowseClassification BrowseClassification { get; set; }

        /// <summary>
        /// Name of the color associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the color associated with an Amazon catalog item.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Individual contributors to the creation of an item, such as the authors or actors.
        /// </summary>
        /// <value>Individual contributors to the creation of an item, such as the authors or actors.</value>
        [DataMember(Name="contributors", EmitDefaultValue=false)]
        public List<ItemContributor> Contributors { get; set; }


        /// <summary>
        /// Name, or title, associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name, or title, associated with an Amazon catalog item.</value>
        [DataMember(Name="itemName", EmitDefaultValue=false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Name of the manufacturer associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the manufacturer associated with an Amazon catalog item.</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.
        /// </summary>
        /// <value>Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.</value>
        [DataMember(Name="memorabilia", EmitDefaultValue=false)]
        public bool? Memorabilia { get; set; }

        /// <summary>
        /// Model number associated with an Amazon catalog item.
        /// </summary>
        /// <value>Model number associated with an Amazon catalog item.</value>
        [DataMember(Name="modelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Quantity of an Amazon catalog item in one package.
        /// </summary>
        /// <value>Quantity of an Amazon catalog item in one package.</value>
        [DataMember(Name="packageQuantity", EmitDefaultValue=false)]
        public int? PackageQuantity { get; set; }

        /// <summary>
        /// Part number associated with an Amazon catalog item.
        /// </summary>
        /// <value>Part number associated with an Amazon catalog item.</value>
        [DataMember(Name="partNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// First date on which an Amazon catalog item is shippable to customers.
        /// </summary>
        /// <value>First date on which an Amazon catalog item is shippable to customers.</value>
        [DataMember(Name="releaseDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ReleaseDate { get; set; }

        /// <summary>
        /// Name of the size associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the size associated with an Amazon catalog item.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Name of the style associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the style associated with an Amazon catalog item.</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; set; }

        /// <summary>
        /// Identifies an Amazon catalog item is eligible for trade-in.
        /// </summary>
        /// <value>Identifies an Amazon catalog item is eligible for trade-in.</value>
        [DataMember(Name="tradeInEligible", EmitDefaultValue=false)]
        public bool? TradeInEligible { get; set; }

        /// <summary>
        /// Identifier of the website display group associated with an Amazon catalog item.
        /// </summary>
        /// <value>Identifier of the website display group associated with an Amazon catalog item.</value>
        [DataMember(Name="websiteDisplayGroup", EmitDefaultValue=false)]
        public string WebsiteDisplayGroup { get; set; }

        /// <summary>
        /// Display name of the website display group associated with an Amazon catalog item.
        /// </summary>
        /// <value>Display name of the website display group associated with an Amazon catalog item.</value>
        [DataMember(Name="websiteDisplayGroupName", EmitDefaultValue=false)]
        public string WebsiteDisplayGroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSummaryByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  AdultProduct: ").Append(AdultProduct).Append("\n");
            sb.Append("  Autographed: ").Append(Autographed).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BrowseClassification: ").Append(BrowseClassification).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Contributors: ").Append(Contributors).Append("\n");
            sb.Append("  ItemClassification: ").Append(ItemClassification).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Memorabilia: ").Append(Memorabilia).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  PackageQuantity: ").Append(PackageQuantity).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  TradeInEligible: ").Append(TradeInEligible).Append("\n");
            sb.Append("  WebsiteDisplayGroup: ").Append(WebsiteDisplayGroup).Append("\n");
            sb.Append("  WebsiteDisplayGroupName: ").Append(WebsiteDisplayGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemSummaryByMarketplace);
        }

        /// <summary>
        /// Returns true if ItemSummaryByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSummaryByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSummaryByMarketplace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.AdultProduct == input.AdultProduct ||
                    (this.AdultProduct != null &&
                    this.AdultProduct.Equals(input.AdultProduct))
                ) && 
                (
                    this.Autographed == input.Autographed ||
                    (this.Autographed != null &&
                    this.Autographed.Equals(input.Autographed))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.BrowseClassification == input.BrowseClassification ||
                    (this.BrowseClassification != null &&
                    this.BrowseClassification.Equals(input.BrowseClassification))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Contributors == input.Contributors ||
                    this.Contributors != null &&
                    this.Contributors.SequenceEqual(input.Contributors)
                ) && 
                (
                    this.ItemClassification == input.ItemClassification ||
                    (this.ItemClassification != null &&
                    this.ItemClassification.Equals(input.ItemClassification))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Memorabilia == input.Memorabilia ||
                    (this.Memorabilia != null &&
                    this.Memorabilia.Equals(input.Memorabilia))
                ) && 
                (
                    this.ModelNumber == input.ModelNumber ||
                    (this.ModelNumber != null &&
                    this.ModelNumber.Equals(input.ModelNumber))
                ) && 
                (
                    this.PackageQuantity == input.PackageQuantity ||
                    (this.PackageQuantity != null &&
                    this.PackageQuantity.Equals(input.PackageQuantity))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.TradeInEligible == input.TradeInEligible ||
                    (this.TradeInEligible != null &&
                    this.TradeInEligible.Equals(input.TradeInEligible))
                ) && 
                (
                    this.WebsiteDisplayGroup == input.WebsiteDisplayGroup ||
                    (this.WebsiteDisplayGroup != null &&
                    this.WebsiteDisplayGroup.Equals(input.WebsiteDisplayGroup))
                ) && 
                (
                    this.WebsiteDisplayGroupName == input.WebsiteDisplayGroupName ||
                    (this.WebsiteDisplayGroupName != null &&
                    this.WebsiteDisplayGroupName.Equals(input.WebsiteDisplayGroupName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.AdultProduct != null)
                    hashCode = hashCode * 59 + this.AdultProduct.GetHashCode();
                if (this.Autographed != null)
                    hashCode = hashCode * 59 + this.Autographed.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.BrowseClassification != null)
                    hashCode = hashCode * 59 + this.BrowseClassification.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Contributors != null)
                    hashCode = hashCode * 59 + this.Contributors.GetHashCode();
                if (this.ItemClassification != null)
                    hashCode = hashCode * 59 + this.ItemClassification.GetHashCode();
                if (this.ItemName != null)
                    hashCode = hashCode * 59 + this.ItemName.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.Memorabilia != null)
                    hashCode = hashCode * 59 + this.Memorabilia.GetHashCode();
                if (this.ModelNumber != null)
                    hashCode = hashCode * 59 + this.ModelNumber.GetHashCode();
                if (this.PackageQuantity != null)
                    hashCode = hashCode * 59 + this.PackageQuantity.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.TradeInEligible != null)
                    hashCode = hashCode * 59 + this.TradeInEligible.GetHashCode();
                if (this.WebsiteDisplayGroup != null)
                    hashCode = hashCode * 59 + this.WebsiteDisplayGroup.GetHashCode();
                if (this.WebsiteDisplayGroupName != null)
                    hashCode = hashCode * 59 + this.WebsiteDisplayGroupName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
